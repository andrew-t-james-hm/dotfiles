"
"  ____                                 _
" |  _ \ ___ _ __ ___  ___  _ __   __ _| |
" | |_) / _ \ '__/ __|/ _ \| '_ \ / _` | |
" |  __/  __/ |  \__ \ (_) | | | | (_| | |
" |_|   \___|_|  |___/\___/|_| |_|\__,_|_|
"
"                  __
"  _ __  _ __ ___ / _| ___ _ __ ___ _ __   ___ ___
" | '_ \| '__/ _ \ |_ / _ \ '__/ _ \ '_ \ / __/ _ \
" | |_) | | |  __/  _|  __/ | |  __/ | | | (_|  __/
" | .__/|_|  \___|_|  \___|_|  \___|_| |_|\___\___|
" |_|
"        _                       __ _ _
" __   _(_)_ __ ___  _ __ ___   / _(_) | ___
" \ \ / / | '_ ` _ \| '__/ __| | |_| | |/ _ \
"  \ V /| | | | | | | | | (__  |  _| | |  __/
" (_)_/ |_|_| |_| |_|_|  \___| |_| |_|_|\___|
"
"
"
" My personally preferred version of vim is the one with the "HUGE" feature
" set, in addition to the following configure options:
"
" ./configure --with-features=huge --enable-gui=macvim --enable-perlinterp
" --enable-pythoninterp --enable-rubyinterp --enable-cscope --enable-multibyte
"  --enable-luainterp --enable-cscope --with-lua-prefix=/usr/local
"  --with-luajit --with-tlib=ncurses --with-compiledby=Andrew
"
" To start vim without using this .vimrc file, use:
"     vim -u NORC
"
" To start vim without loading any .vimrc or plugins, use:
"     vim -u NONE
"
" Use vim settings, rather then vi settings (much better!)
" This must be first, because it changes other options as a side effect.
set nocompatible
filetype on
filetype off

" }}}

" Preamble -------------------------------------------------------------------- {{{

" Utils {{{
source ~/.vim/functions/util.vim
" }}}

" Load external configuration before anything else {{{
if filereadable(expand("~/.vim/before.vimrc"))
  source ~/.vim/before.vimrc
endif
" }}}

" Local vimrc configuration {{{
let s:localrc = expand($HOME . '/.vim/local.vimrc')
if filereadable(s:localrc)
    exec ':so ' . s:localrc
endif
" }}}

" Use pathogen to easily modify the runtime path to include all plugins under
" the ~/.vim/bundle directory
filetype off                    " force reloading *after* pathogen loaded
silent! call pathogen#helptags()
silent! call pathogen#runtime_append_all_bundles()
filetype plugin indent on       " enable detection, plugins and indenting in one step

" }}}
" Basic options --------------------------------------------------------------- {{{
set breakindent
"set showbreak=…
set modelines=0
set updatecount=50 "write swap file to disk after 50 keystrokes
set scrolljump=5
set scrolloff=5                 " keep 5 lines off the edges of the screen when scrolling
set autoindent " always set autoindenting on
set copyindent    " copy the previous indentation on autoindenting
set showmode                    " always show what mode we're currently editing in
set whichwrap=b,s,h,l,<,>,[,]
set backspace=indent,eol,start    " allow backspacing over everything in insert mode
"set binary
set cpoptions+=J
set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮,trail:␣
set shell=/bin/bash
set showbreak=↪
set splitbelow
set splitright
set wrapscan      " search wrap around the end of the file
set ignorecase    " ignore case when searching
set smartcase     " ignore case if search pattern is all lowercase,
                  "    case-sensitive otherwise

set nrformats=octal,hex,alpha " Enable CTRL-A/CTRL-X to work on octal and hex numbers, as well as characters
set smarttab      " insert tabs on the start of a line according to
                  "    shiftwidth, not tabstop
set incsearch     " show search matches as you type
set notitle       " don't rewrite title string
set showmatch     " when a bracket is inserted, breifly jump to a matching one
set matchtime=2   " jump to matching bracket for 2/10th of a second
set hlsearch      " highlight search terms
nohlsearch        " avoid highlighting when reloading vimrc

set gdefault                    " search/replace "globally" (on a line) by default
set nolist                      " don't show invisible characters by default,
                                " but it is enabled for some file types (see later)
set virtualedit=all             " allow the cursor to go in to "invalid" places
set synmaxcol=512               " long lines slow down vim
"https://coderwall.com/p/j9wnfw
set clipboard=unnamed

" Remember things between sessions
"
" '20  - remember marks for 20 previous files
" \"50 - save 50 lines for each register
" :20  - remember 20 items in command-line history
" %    - remember the buffer list (if vim started without a file arg)
" n    - set name of viminfo file
set viminfo='20,\"50,:20,%,n~/.viminfo

" Editor layout {{{

set termencoding=utf-8
set encoding=utf-8
set lazyredraw                  " don't update the display while executing macros
set cmdheight=1                 " use a status bar that is 2 rows high

" }}}
" Tabs, spaces, wrapping {{{

set tabstop=4
set shiftwidth=4 " number of spaces to use for autoindenting
set shiftround    " use multiple of shiftwidth when indenting with '<' and '>'
set softtabstop=4
set expandtab                   " expand tabs by default (overloadable per file type later)
set smartindent                 " use smart indent
set nowrap                      " don't wrap lines
set textwidth=0                 " don't break line automatically
set formatoptions+=1            " When wrapping paragraphs, don't end lines
                                "    with 1-letter words (looks stupid)
set formatoptions+=m           " add multibyte support
" set colorcolumn=+1
set nolinebreak                " don't break line automatically
set iminsert=0                 " disable input method control in insert mode
set imsearch=0                 " disable input method control in search mode

" }}}
" Vim behaviour {{{
set hidden                      " hide buffers instead of closing them this
                                "    means that the current buffer can be put
                                "    to background without being written; and
                                "    that marks and undo history are preserved
set switchbuf=useopen           " reveal already opened files from the
                                " quickfix window instead of opening new
                                " buffers
set history=1000                " remember more commands and search history
set undolevels=3000             " use many muchos levels of undo
set undoreload=10000            " max number lines to save for undo on a buffer reload
set undofile                    " keep a persistent backup file
set undodir=~/.vim/tmp/undo     " undo files
set nobackup                    " do not keep backup files, it's 70's style cluttering
set noswapfile                  " do not write annoying intermediate swap files,
                                "    who did ever restore from swap files anyway?
set backupdir=~/.vim/tmp/backup " backups
set directory=~/vim/tmp/swap  " swap files
                                " store swap files in one of these directories
                                "    (in case swapfile is ever turned on)
set autoread                    " auto re-read when the file is written by other applications
set wildmenu                    " make tab completion for files/buffers act like bash
set wildmode=list:longest,full  " show a list when pressing tab and complete
                                "    first full match
set wildignore=.svn,CVS,.git,.hg,*.o,*.a,*.class,*.mo,*.la,*.so,*.obj,*.swp,*.jpg,*.png,*.xpm,*.gif,.DS_Store,*.aux,*.out,*.toc,tmp,*.scssc
set title                       " change the terminal's title
set visualbell                  " don't beep
set noerrorbells                " don't beep
set nomodeline                  " disable mode lines (security measure)
"set ttyfast                     " always use a fast terminal

" Cursorline {{{
set cursorline                  " underline the current line, for quick orientation
" Only show cursorline in the current window and in normal mode.
augroup cline
    au!
    au WinLeave,InsertEnter,BufEnter,BufRead * setlocal nocursorline
    au WinEnter,InsertLeave,BufLeave * setlocal cursorline
augroup END
" }}}

" Trailing whitespace {{{
" Only shown when not in insert mode so I don't go insane.
augroup trailing
    au!
    au InsertEnter * :set listchars-=trail:␣
    au InsertLeave * :set listchars+=trail:␣

    " With the following, the command will be applied to the first window, and
    " to any subsequent windows. The pattern * applies the highlight to all
    " files. Show leading whitespace that includes spaces, and trailing whitespace.
    au ColorScheme * highlight ExtraWhitespace ctermbg=darkgreen guibg=darkgreen
    au BufWinEnter,InsertLeave * match ExtraWhitespace /\s\+$/
    au BufWinLeave,InsertEnter * call clearmatches()
augroup END

" Remove trailing whitespaces when saving
" Wanna know more? http://vim.wikia.com/wiki/Remove_unwanted_spaces
" If you want to remove trailing spaces when you want, so not automatically,
" see
" http://vim.wikia.com/wiki/Remove_unwanted_spaces#Display_or_remove_unwanted_whitespace_with_a_script.
"autocmd BufWritePre * :%s/\s\+$//e

" }}}

" Relative Number {{{
" Only show relative number in the current window
augroup rnumber
    au!
    au WinEnter,BufEnter,BufRead * setlocal relativenumber
    au WinLeave,BufLeave * setlocal norelativenumber
augroup END
" }}}


set dictionary=/usr/share/dict/words

" Don't redraw while executing macros
"set nolazyredraw

"set notimeout
"set ttimeout
"set ttimeoutlen=10

" Highlight VCS conflict markers
"match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

if has('cmdline_info')
  set ruler                   " show the ruler
  set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " a ruler on steroids
  set showcmd                   " show (partial) command in the last line of the screen
                                "    this also shows visual selection info
endif


" }}}
" Status line {{{

if has('statusline')
  set laststatus=2                " tell VIM to always put a status line in, even
                                "    if there is only one window
  "set statusline=\ \ \ \ \ line:%l\ column:%c\ \ \ %M%Y%r%=%-14.(%t%)\ %p%%
  set statusline=   " clear the statusline, allow for rearranging parts
  set statusline+=%f\                "Path to the file, as typed or relative to current dir
  set statusline+=%#errormsg#        "change color
  set statusline+=%{&ff!='unix'?'['.&ff.']':''}   "display a warning if fileformat isnt unix
  set statusline+=%*                "reset color to normal statusline color
  set statusline+=%#errormsg#       "change color
  set statusline+=%{(&fenc!='utf-8'&&&fenc!='')?'['.&fenc.']':''}   "display a warning if file encoding isnt utf-8
  set statusline+=%*                "reset color to normal statusline color
  set statusline+=\ %y              "filetype
  set statusline+=%([%R%M]%)        "read-only (RO), modified (+) and unmodifiable (-) flags between braces
  set statusline+=%{'~'[&pm=='']}   "shows a '~' if in patchmode
  set statusline+=\ %{fugitive#statusline()}  "show Git info, via fugitive.git
  "set statusline+=\ (%{synIDattr(synID(line('.'),col('.'),0),'name')}) "DEBUG : display the current syntax item name
  set statusline+=%#error#          "change color
  set statusline+=%{&paste?'[paste]':''}    "display a warning if &paste is set

  set statusline+=%#warningmsg#
  set statusline+=%{SyntasticStatuslineFlag()}

  set statusline+=%*                "reset color to normal statusline color
  set statusline+=%=                "right-align following items
  set statusline+=#%n               "buffer number
  set statusline+=\ %l/%L,          "current line number/total number of lines,
  set statusline+=%c                "Column number
  set statusline+=%V                " -{Virtual column number} (Not displayed if equal to 'c')
  set statusline+=\ %p%%            "percentage of lines through the file%
  set statusline+=\                 "trailing space
  if has('title')
    set titlestring=%t%(\ [%R%M]%)
  endif
endif

" }}}
" Leader {{{

" Change the mapleader from \ to ,
let mapleader=","
let maplocalleader = "\\"

" }}}
" Color scheme {{{

if &t_Co >= 256 || has("gui_running")
  set background=dark
  "colorscheme mustang
  colorscheme jellybeans
endif

if &t_Co > 2 || has("gui_running")
  syntax on                    " switch syntax highlighting on, when the terminal has colors
  " http://superuser.com/questions/430344/macvim-lags-while-vim-on-terminal-is-buttery-smooth
  " http://stackoverflow.com/questions/4775605/vim-syntax-highlight-improve-performance
  syntax sync minlines=256
endif

" }}}

" }}}
" Useful functions -------------------------------------------------------- {{{

command! CleanEmptyBuffers call CleanEmptyBuffers()
autocmd BufReadPost * call SetCursorPosition()

" }}}
" Searching and movement ------------------------------------------------------ {{{

"clearing highlighted search as well as redraw
nnoremap <silent> <leader>/ :nohlsearch<CR><C-L>
inoremap <silent> <leader>/ <C-O>:nohlsearch<CR>

"nmap <silent> <leader>hh :set invhlsearch<CR>
"nmap <silent> <leader>ll :set invlist<CR>
"nmap <silent> <leader>nn :set invnumber<CR>
"nmap <silent> <leader>pp :set invpaste<CR>
"nmap <silent> <leader>ii :set invrelativenumber<CR>

" Change Working Directory to that of the current file
cmap cwd lcd %:p:h
cmap cd. lcd %:p:h

" Thanks to Steve Losh for this liberating tip
" See http://stevelosh.com/blog/2010/09/coming-home-to-vim
nnoremap / /\v
"vnoremap / /\v

" Speed up scrolling of the viewport slightly
nnoremap <C-e> 2<C-e>
nnoremap <C-y> 2<C-y>

" clear search matching
noremap <leader><space> :noh<cr>:call clearmatches()<cr>

" Don't jump when using * for search
nnoremap * *<c-o>

" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

" Same when jumping around
nnoremap g; g;zz
nnoremap g, g,zz

" Open a Quickfix window for the last search.
nnoremap <silent> <leader>? :execute 'vimgrep /'.@/.'/g %'<CR>:copen<CR>

" Highlight word {{{

nnoremap <silent> <leader>hh :execute 'match InterestingWord1 /\<<c-r><c-w>\>/'<cr>
nnoremap <silent> <leader>h1 :execute 'match InterestingWord1 /\<<c-r><c-w>\>/'<cr>
nnoremap <silent> <leader>h2 :execute '2match InterestingWord2 /\<<c-r><c-w>\>/'<cr>
nnoremap <silent> <leader>h3 :execute '3match InterestingWord3 /\<<c-r><c-w>\>/'<cr>

" }}}

" }}}
" Directional Keys ---------------------------------------------------------- {{{
"nnoremap <up> <nop>
"nnoremap <down> <nop>
"nnoremap <left> <nop>
"nnoremap <right> <nop>
"inoremap <up> <nop>
"inoremap <down> <nop>
"inoremap <left> <nop>
"inoremap <right> <nop>

" Easier moving in tabs and windows
noremap <C-j>  <C-w>j
noremap <C-k>  <C-w>k
noremap <C-l>  <C-w>l
noremap <C-h>  <C-w>h

" Easy buffer navigation
noremap <leader>bp :bprevious<cr>
noremap <leader>bn :bnext<cr>

" Splits ,v and ,h to open new splits (vertical and horizontal)
"nnoremap <leader>v <C-w>v<C-w>l
"nnoremap <leader>h <C-w>s<C-w>j

" Reselect visual block after indent/outdent
"vnoremap < <gv
"vnoremap > >gv

" Bubbling lines
nmap <C-Up> [e
nmap <C-Down> ]e
vmap <C-Up> [egv
vmap <C-Down> ]egv

" }}}
" Triggers {{{

" Save when losing focus
"au FocusLost    * :silent! wall
"
" When vimrc is edited, reload it
"autocmd! BufWritePost vimrc source ~/.vimrc

" }}}
" Convenience mappings -------------------------------------------------------- {{{

" Fast saving and closing current buffer without closing windows displaying the
" buffer
nmap <leader>wq :w!<cr>:Bclose<cr>

" Seriously, guys. It's not like :W is bound to anything anyway.
command! W :w

" map <Alt-p> and <Alt-P> to paste below/above and reformat
nnoremap <M-P> P'[v']=
nnoremap <M-p> p'[v']=

" Clean whitespace
map <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

" Formatting, TextMate-style
nnoremap <leader>q gqip
" good when you want to delete a paragraph?
"nnoremap <leader>q gqap

" Easier linewise reselection
nnoremap <leader>v V`]

" Better Completion
set completeopt=longest,menuone,preview

" This is a little tweak that is a time-saver while you’re building
" up your .vimrc. This effectively maps the ,ev and ,sv keys to
" edit/reload .vimrc. (I got this from Derek Wyatt’s .vimrc file.)
nnoremap <leader>ev <C-w>s<C-w>j:e $MYVIMRC<cr>
nnoremap <leader>sv <C-w>s<C-w>j:so $MYVIMRC<cr>
nnoremap <leader>es <C-w>s<C-w>j:e ~/.vim/snippets/<cr>
nnoremap <leader>eg <C-w>s<C-w>j:e ~/.gitconfig<cr>
nnoremap <leader>ez <C-w>s<C-w>j:e ~/.zshrc<cr>
nnoremap <leader>et <C-w>s<C-w>j:e ~/.tmux.conf<cr>

" Sudo to write
cmap w!! w !sudo tee % >/dev/null

" Quickly close the current window
"nnoremap <leader>q :q<CR>

" Use Q for formatting the current paragraph (or visual selection)
"vmap Q gq
"nmap Q gqap

" Use ,d (or ,dd or ,dj or 20,dd) to delete a line without adding it to the
" yanked stack (also, in visual mode)
nmap <silent> <leader>d "_d
vmap <silent> <leader>d "_d

" Yank from the cursor to the end of the line, to be consistent with C and D.
nnoremap Y y$
nnoremap D d$

" Yank/paste to the OS clipboard with ,y and ,p
nmap <leader>yo "+y
nmap <leader>Yo "+yy
nmap <leader>po "+p
nmap <leader>Po "+P

" visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv

" better ESC
"inoremap <C-k> <Esc>

" Quick alignment of text
nmap <leader>al :left<CR>
nmap <leader>ar :right<CR>
nmap <leader>ac :center<CR>

" Pull word under cursor into LHS of a substitute (for quick search and
" replace)
nmap <leader>z :%s#\<<C-r>=expand("<cword>")<CR>\>#

" Scratch
nmap <leader><tab> :Sscratch<CR><C-W>x<C-J>

" Toggle paste: Every Vim user likes to enable auto-indenting of
" source code, so Vim can intelligently position you cursor on the
" next line as you type. This has one big ugly consequence however:
" when you paste text into your terminal-based Vim with a right
" mouse click, Vim cannot know it is coming from a paste. To Vim, it
" looks like text entered by someone who can type incredibly fast
" :) Since Vim thinks this is regular key strokes, it applies all
" auto-indenting and auto-expansion of defined abbreviations to the
" input, resulting in often cascading indents of paragraphs. There is
" an easy option to prevent this, however. You can temporarily switch
" to “paste mode”, simply by setting the following option:
set pastetoggle=<F7>

" Reselect text that was just pasted with <leader>v
nnoremap <leader>v V`]

" Replaste
nnoremap <D-p> "_ddPV`]

" }}}
" Folding --------------------------------------------------------------------- {{{

set foldenable                  " enable folding
set foldcolumn=0                " add a fold column
set foldmethod=marker           " detect triple-{ style fold markers
set foldlevelstart=99           " start out with nothing folded
set foldopen=block,hor,insert,jump,mark,percent,quickfix,search,tag,undo
                                " which commands trigger auto-unfold
" Space to toggle folds.
nnoremap <Space> za
vnoremap <Space> za

" Make zO recursively open whatever top level fold we're in, no matter where the
" cursor happens to be.
nnoremap zO zCzO

" Use ,z to "focus" the current fold.
nnoremap <leader>z zMzvzz

" }}}
" Destroy infuriating keys ---------------------------------------------------- {{{

" Fuck you, help key.
set fuoptions=maxvert,maxhorz
noremap <F1> :set invfullscreen<CR>
inoremap <F1> <ESC>:set invfullscreen<CR>a

" Fuck you too, manual key.
nnoremap K <nop>

" Stop it, hash key.
inoremap # X<BS>#

" Dreadful 'Ex' Mode
nnoremap <silent> Q ZZ

" }}}
" Various filetype-specific stuff --------------------------------------------- {{{

" Markdown {{{

autocmd FileType markdown setlocal wrap
autocmd FileType markdown setlocal linebreak
autocmd FileType markdown setlocal nolist
autocmd FileType markdown setlocal textwidth=0
autocmd FileType markdown setlocal virtualedit=
autocmd FileType markdown setlocal display+=lastline
autocmd FileType markdown setlocal wrapmargin=10
autocmd FileType markdown noremap  <buffer> <silent> k gk
autocmd FileType markdown noremap  <buffer> <silent> j gj
autocmd FileType markdown noremap  <buffer> <silent> 0 g0
autocmd FileType markdown noremap  <buffer> <silent> $ g$

" }}}
" SRT {{{

" Syntax highlighting for subtitle files in Subrip (srt) format
autocmd BufNewFile,BufRead *.srt setf srt

" }}}
" Ant {{{

autocmd FileType ant setlocal sw=2
autocmd FileType ant setlocal ts=2
autocmd FileType ant setlocal sts=2
autocmd FileType ant setlocal textwidth=0

" }}}
" Python {{{

" (tab width 4 chr, wrap at 79th char)
autocmd FileType python setlocal sw=4
autocmd FileType python setlocal ts=4
autocmd FileType python setlocal sts=4
autocmd FileType python setlocal textwidth=79
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete

" }}}
" Ruby {{{

"au FileType ruby setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2

" }}}
" C {{{

au FileType c setlocal foldmethod=syntax

" }}}
" HTML, Mustache, Handlebars, html template(s) {{{


" HTML (tab width 2 chr, no wrapping)
au BufRead,BufNewFile *.handlebars set filetype=handlebars

autocmd FileType mustache,handlebars let b:match_ignorecase = 1 |
    \ let b:match_words = '<:>,' .
    \ '<\@<=[ou]l\>[^>]*\%(>\|$\):<\@<=li\>:<\@<=/[ou]l>,' .
    \ '<\@<=dl\>[^>]*\%(>\|$\):<\@<=d[td]\>:<\@<=/dl>,' .
    \ '<\@<=\([^/][^ \t>]*\)[^>]*\%(>\|$\):<\@<=/\1>'

autocmd FileType html,mustache,handlebars setlocal sw=2
autocmd FileType html,mustache,handlebars setlocal ts=2
autocmd FileType html,mustache,handlebars setlocal sts=2
autocmd FileType html,mustache,handlebars setlocal textwidth=0
autocmd FileType html,mustache,handlebars setlocal omnifunc=htmlcomplete#CompleteTags

autocmd FileType handlebars setlocal foldmethod=marker
autocmd FileType handlebars setlocal commentstring={{!%s}}
autocmd FileType handlebars setlocal foldmarker=[[[,]]]

" XHTML (tab width 2 chr, no wrapping)
autocmd FileType xhtml setlocal sw=2
autocmd FileType xhtml setlocal ts=2
autocmd FileType xhtml setlocal sts=2
autocmd FileType xhtml setlocal textwidth=0

" }}}
" CSS, Stylus, and LessCSS {{{

" (tab width 2 chr, wrap at 79th char)
autocmd FileType css,stylus setlocal sw=2
autocmd FileType css,stylus setlocal ts=2
autocmd FileType css,stylus setlocal sts=2
autocmd FileType css,stylus setlocal textwidth=0
autocmd FileType css,stylus setlocal omnifunc=csscomplete#CompleteCSS

au BufNewFile,BufRead *.less setlocal filetype=less

au BufNewFile,BufRead *.css  setlocal foldmethod=marker
au BufNewFile,BufRead *.less setlocal foldmethod=marker

au BufNewFile,BufRead *.css  setlocal foldmarker={,}
au BufNewFile,BufRead *.less setlocal foldmarker={,}

" Use cc to change lines without borking the indentation.
au BufNewFile,BufRead *.css  nnoremap <buffer> cc ddko
au BufNewFile,BufRead *.less nnoremap <buffer> cc ddko

" Use <leader>S to sort properties.  Turns this:
"
"     p {
"         width: 200px;
"         height: 100px;
"         background: red;
"
"         ...
"     }
"
" into this:

"     p {
"         background: red;
"         height: 100px;
"         width: 200px;
"
"         ...
"     }
"

au BufNewFile,BufRead *.css  nnoremap <buffer> <localleader>S ?{<CR>jV/\v^\s*\}?$<CR>k:sort<CR>:noh<CR>
au BufNewFile,BufRead *.less nnoremap <buffer> <localleader>S ?{<CR>jV/\v^\s*\}?$<CR>k:sort<CR>:noh<CR>

" }}}
" Stylus {{{

" }}}
" Par {{{

" set formatprg=par\ -w72
:map <A-q> {v}!par -jw72<CR>
:vmap <A-q> !par -jw72<CR>

" }}}
" haskell {{{

au BufEnter *.hs compiler ghc
let g:ghc = "/usr/local/bin/ghc"
let g:haddock_browser = "open"

" }}}
" coffee script {{{

au BufNewFile,BufReadPost *.coffee setl shiftwidth=2 tabstop=2 softtabstop=2 expandtab

" }}}
" Rainbow Parentheses {{{

let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0
autocmd VimEnter * RainbowParenthesesToggle
autocmd Syntax * RainbowParenthesesLoadRound
autocmd Syntax * RainbowParenthesesLoadSquare
autocmd Syntax * RainbowParenthesesLoadBraces

" }}}
" Javascript {{{

" (tab width 2 chr, no-wrapping)
autocmd FileType javascript setlocal sw=2
autocmd FileType javascript setlocal ts=2
autocmd FileType javascript setlocal sts=2
autocmd FileType javascript setlocal textwidth=0
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS

au FileType javascript nnoremap <buffer> <C-c>  :<C-u>call WriteJSDocComment()<CR>
au FileType javascript call JavaScriptFold()
au FileType javascript setl fen
au FileType javascript setl nocindent

au FileType javascript imap <C-t> console.log();<esc>hi
au FileType javascript imap <C-a> alert();<esc>hi

function! JavaScriptFold()
    "setl foldmethod=syntax
    "setl foldlevelstart=1
    "syn region foldBraces start="{" end="}" transparent fold keepend extend
    setl foldmethod=marker
    setl foldmarker={,}

    function! FoldText()
        return substitute(getline(v:foldstart), '{.*', '{...}', '')
    endfunction
    setl foldtext=FoldText()
endfunction

" }}}
" Markdown {{{

au BufNewFile,BufRead *.m*down setlocal filetype=markdown

" Use <localleader>1/2/3 to add headings.
au Filetype markdown nnoremap <buffer> <localleader>1 yypVr=
au Filetype markdown nnoremap <buffer> <localleader>2 yypVr-
au Filetype markdown nnoremap <buffer> <localleader>3 I### <ESC>

" }}}
" Vim {{{

au FileType vim setlocal foldmethod=marker
au FileType help setlocal textwidth=78
 " Bind <F1> to show the keyword under cursor
" general help can still be entered manually, with :h
au FileType vim noremap <buffer> <F1> <Esc>:help <C-r><C-w><CR>
au FileType vim noremap! <buffer> <F1> <Esc>:help <C-r><C-w><CR>

" }}}
" Firefox {{{

au BufRead,BufNewFile ~/Library/Caches/* setlocal buftype=nofile

" }}}
" XML {{{

autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" }}}

" }}}
" Plugin settings ------------------------------------------------------------- {{{

" Vim-Airline {{{

" Finally, you can add the convenience variable to your vimrc which will
" automatically populate the g:airline_symbols dictionary with the powerline
" symbols.

let g:airline_powerline_fonts = 1

" }}}
" Tern {{{

let g:tern_map_keys = 0
let g:tern_show_argument_hints = 'no'
let g:tern_show_signature_in_pum = 0

nnoremap <buffer> <Leader><Leader>td  :TernDoc<CR>
nnoremap <buffer> <Leader><Leader>tb  :TernDocBrowse<CR>
nnoremap <buffer> <Leader><Leader>tt  :TernType<CR>
nnoremap <buffer> <Leader><Leader>td  :TernDef<CR>
nnoremap <buffer> <Leader><Leader>tpd :TernDefPreview<CR>
nnoremap <buffer> <Leader><Leader>tsd :TernDefSplit<CR>
nnoremap <buffer> <Leader><Leader>ttd :TernDefTab<CR>
nnoremap <buffer> <Leader><Leader>tr  :TernRefs<CR>
nnoremap <buffer> <Leader><Leader>tR  :TernRename<CR>

" }}}
" Color Highlight {{{

"let g:colorizer_auto_color = 1
let g:colorizer_auto_filetype='css,html,handlebars,stylus,javascript'
let g:colorizer_skip_comments = 1

" }}}
" AlignMaps {{{

"AlignCtrl lW =

" }}}
" Ack {{{

map <leader>a :Ack! 
" You can use Ag with ack.vim by adding the following line to your .vimrc:
let g:ackprg = 'ag --nogroup --nocolor --column'

" }}}
" Marked Support {{{
nnoremap <leader>M :silent !open -a Marked.app '%:p'<cr>

" }}}
" MultiMarkdown Support {{{
nnoremap <leader>MM :silent !open -a MultiMarkdown\ Composer.app '%:p'<cr>

" }}}
" Google Code Wiki {{{

autocmd BufNewFile,BufRead *.wiki set ft=googlecodewiki

" }}}
" NERD Commenter {{{

nmap <leader># :call NERDComment(0, "invert")<cr>
vmap <leader># :call NERDComment(0, "invert")<cr>

" }}}
" NERD Tree {{{

" Put focus to the NERD Tree with F3 (tricked by quickly closing it and
" immediately showing it again, since there is no :NERDTreeFocus command)
nmap <leader>n :NERDTreeClose<CR>:NERDTreeToggle<CR>
nmap <leader>m :NERDTreeClose<CR>:NERDTreeFind<CR>
nmap <leader>N :NERDTreeClose<CR>
"map <F2> :NERDTreeToggle<CR>:NERDTreeMirror<CR>

" Disable the scrollbars (NERDTree)
"set guioptions-=r
"set guioptions-=L
" Keep NERDTree window fixed between multiple toggles
"set winfixwidth

let NERDTreeChDirMode=0

" Store the bookmarks file
let NERDTreeBookmarksFile=expand("~/.vim/tmp/NERDTreeBookmarks")

" Show the bookmarks table on startup
let NERDTreeShowBookmarks=1

" Show hidden files, too
let NERDTreeShowFiles=1
let NERDTreeShowHidden=1

" Quit on opening files from the tree
let NERDTreeQuitOnOpen=1

" Highlight the selected entry in the tree
let NERDTreeHighlightCursorline=1

" Use a single click to fold/unfold directories and a double click to open
" files
let NERDTreeMouseMode=2

let NERDTreeKeepTreeInNewTab=1

" Don't display these kinds of files
let NERDTreeIgnore=[ '\.DS_Store', '\.pyc$', '\.pyo$', '\.py\$class$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$' ]

au Filetype nerdtree setlocal nolist
au Filetype nerdtree setlocal relativenumber

" }}}
" HTML5 {{{

let g:event_handler_attributes_complete = 0
let g:rdfa_attributes_complete = 0
let g:microdata_attributes_complete = 0
let g:atia_attributes_complete = 0

" }}}
" Syntastic {{{

au BufEnter * call UpdateJsHintConf()
au BufEnter * call UpdateJscsConf()
let g:syntastic_enable_signs=0
let g:syntastic_error_symbol='✗'
let g:syntastic_always_populate_loc_list=1
"let g:syntastic_disabled_filetypes = ['html', 'python', 'javascript']
"let g:syntastic_javascript_checker = 'jshint'
let g:syntastic_javascript_checkers = ['jshint', 'jscs']
"let g:syntastic_javascript_jshint_conf = '~/.jshintrc'
"let g:syntastic_javascript_checker = 'closurecompiler'
let g:syntastic_javascript_closurecompiler_path = '/usr/local/lib/closurecompiler/compiler.jar'
let g:syntastic_mode_map = { 'mode': 'active',
                            \ 'active_filetypes': ['ruby', 'php', 'javascript', 'html', 'handlebars', 'stylus', 'css'],
                            \ 'passive_filetypes': ['puppet', 'slim'] }


" }}}
" SnipMate {{{

" Shortcut for reloading snippets, useful when developing
nnoremap ,smr <esc>:exec ReloadAllSnippets()<cr>

" }}}
" JSON {{{

au BufRead,BufNewFile *.json set filetype=json
nmap <leader>jt <Esc>:%!python -m json.tool<CR><Esc>:set filetype=json<CR>

" }}}
" Sessions {{{

let g:session_autosave = 'no'
let g:session_autoload = 'yes'
let g:session_directory = '~/.vim/tmp/sessions'
let g:session_persist_colors = 0
let g:session_menu = 0

" }}}
" vim-go {{{

let g:go_disable_autoinstall = 1

" }}}
" Rooter{{{

let g:rooter_patterns = ['package.json', 'bower.json', 'Jakefile.js', 'Rakefile', 'Gruntfile.js', '.git', '.git/', '.svn/']
let g:rooter_use_lcd = 1

" }}}
" Fugitive {{{

nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gl :Glog<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gw :Gwrite<cr>
nnoremap <leader>gg :Ggrep<cr>
nnoremap <leader>gh :Gbrowse<cr>
nnoremap <leader>ga :Gadd<cr>
nnoremap <leader>gb :Gblame<cr>
nnoremap <leader>gco :Gcheckout<cr>
nnoremap <leader>gci :Gcommit<cr>
nnoremap <leader>gm :Gmove<cr>
nnoremap <leader>gr :Gremove<cr>

" ,f for global git serach for word under the cursor (with highlight)
nmap <leader>gf :let @/="\\<<C-R><C-W>\\>"<CR>:set hls<CR>:silent Ggrep -w "<C-R><C-W>"<CR>:ccl<CR>:cw<CR><CR>
" same in visual mode
:vmap <leader>gf y:let @/=escape(@", '\\[]$^*.')<CR>:set hls<CR>:silent Ggrep -F "<C-R>=escape(@", '\\"#')<CR>"<CR>:ccl<CR>:cw<CR><CR>

"To use with GitHub FI, point g:fugitive_github_domains at a list of domains:
let g:fugitive_github_domains = ['http://git.ibaset.com']

augroup ft_fugitive
    au!
    au BufNewFile,BufRead .git/index setlocal nolist
augroup END

" }}}
" YankRing {{{

let g:yankring_replace_n_pkey = '<leader>['
let g:yankring_replace_n_nkey = '<leader>]'
let g:yankring_history_dir = '~/.vim/tmp/'
nmap <leader>y :YRShow<cr>

function! YRRunAfterMaps()
    nnoremap Y :<C-U>YRYankCount 'y$'<CR>
    omap <expr> L YRMapsExpression("", "$")
    omap <expr> H YRMapsExpression("", "^")
endfunction

" }}}
" vim-indent-object {{{

let g:indentobject_meaningful_indentation = ["haml", "sass", "python", "yaml", "markdown"]

" }}}
" easybuffer {{{

nmap <leader>be :EasyBufferToggle<enter>

" }}}
" ctrlp {{{

let g:ctrlp_working_path_mode = ''

" }}}
" HTML Indent {{{

let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"

" }}}

" }}}
" Text objects ---------------------------------------------------------------- {{{

" Shortcut for [] {{{

"onoremap id i[
"onoremap ad a[
"vnoremap id i[
"vnoremap ad a[

" }}}
" Next/Last () {{{
"vnoremap <silent> inb :<C-U>normal! f(vib<cr>
"onoremap <silent> inb :<C-U>normal! f(vib<cr>
"vnoremap <silent> anb :<C-U>normal! f(vab<cr>
"onoremap <silent> anb :<C-U>normal! f(vab<cr>
"vnoremap <silent> in( :<C-U>normal! f(vi(<cr>
"onoremap <silent> in( :<C-U>normal! f(vi(<cr>
"vnoremap <silent> an( :<C-U>normal! f(va(<cr>
"onoremap <silent> an( :<C-U>normal! f(va(<cr>

"vnoremap <silent> ilb :<C-U>normal! F)vib<cr>
"onoremap <silent> ilb :<C-U>normal! F)vib<cr>
"vnoremap <silent> alb :<C-U>normal! F)vab<cr>
"onoremap <silent> alb :<C-U>normal! F)vab<cr>
"vnoremap <silent> il( :<C-U>normal! F)vi(<cr>
"onoremap <silent> il( :<C-U>normal! F)vi(<cr>
"vnoremap <silent> al( :<C-U>normal! F)va(<cr>
"onoremap <silent> al( :<C-U>normal! F)va(<cr>
" }}}
" Next/Last {} {{{
"vnoremap <silent> inB :<C-U>normal! f{viB<cr>
"onoremap <silent> inB :<C-U>normal! f{viB<cr>
"vnoremap <silent> anB :<C-U>normal! f{vaB<cr>
"onoremap <silent> anB :<C-U>normal! f{vaB<cr>
"vnoremap <silent> in{ :<C-U>normal! f{vi{<cr>
"onoremap <silent> in{ :<C-U>normal! f{vi{<cr>
"vnoremap <silent> an{ :<C-U>normal! f{va{<cr>
"onoremap <silent> an{ :<C-U>normal! f{va{<cr>

"vnoremap <silent> ilB :<C-U>normal! F}viB<cr>
"onoremap <silent> ilB :<C-U>normal! F}viB<cr>
"vnoremap <silent> alB :<C-U>normal! F}vaB<cr>
"onoremap <silent> alB :<C-U>normal! F}vaB<cr>
"vnoremap <silent> il{ :<C-U>normal! F}vi{<cr>
"onoremap <silent> il{ :<C-U>normal! F}vi{<cr>
"vnoremap <silent> al{ :<C-U>normal! F}va{<cr>
"onoremap <silent> al{ :<C-U>normal! F}va{<cr>
" }}}
" Next/Last [] {{{
"vnoremap <silent> ind :<C-U>normal! f[vi[<cr>
"onoremap <silent> ind :<C-U>normal! f[vi[<cr>
"vnoremap <silent> and :<C-U>normal! f[va[<cr>
"onoremap <silent> and :<C-U>normal! f[va[<cr>
"vnoremap <silent> in[ :<C-U>normal! f[vi[<cr>
"onoremap <silent> in[ :<C-U>normal! f[vi[<cr>
"vnoremap <silent> an[ :<C-U>normal! f[va[<cr>
"onoremap <silent> an[ :<C-U>normal! f[va[<cr>

"vnoremap <silent> ild :<C-U>normal! F]vi[<cr>
"onoremap <silent> ild :<C-U>normal! F]vi[<cr>
"vnoremap <silent> ald :<C-U>normal! F]va[<cr>
"onoremap <silent> ald :<C-U>normal! F]va[<cr>
"vnoremap <silent> il[ :<C-U>normal! F]vi[<cr>
"onoremap <silent> il[ :<C-U>normal! F]vi[<cr>
"vnoremap <silent> al[ :<C-U>normal! F]va[<cr>
"onoremap <silent> al[ :<C-U>normal! F]va[<cr>
"" }}}
" Next/Last <> {{{
"vnoremap <silent> in< :<C-U>normal! f<vi<<cr>
"onoremap <silent> in< :<C-U>normal! f<vi<<cr>
"vnoremap <silent> an< :<C-U>normal! f<va<<cr>
"onoremap <silent> an< :<C-U>normal! f<va<<cr>

"vnoremap <silent> il< :<C-U>normal! f>vi<<cr>
"onoremap <silent> il< :<C-U>normal! f>vi<<cr>
"vnoremap <silent> al< :<C-U>normal! f>va<<cr>
"onoremap <silent> al< :<C-U>normal! f>va<<cr>
" }}}
" Next '' {{{
"vnoremap <silent> in' :<C-U>normal! f'vi'<cr>
"onoremap <silent> in' :<C-U>normal! f'vi'<cr>
"vnoremap <silent> an' :<C-U>normal! f'va'<cr>
"onoremap <silent> an' :<C-U>normal! f'va'<cr>

"vnoremap <silent> il' :<C-U>normal! F'vi'<cr>
"onoremap <silent> il' :<C-U>normal! F'vi'<cr>
"vnoremap <silent> al' :<C-U>normal! F'va'<cr>
"onoremap <silent> al' :<C-U>normal! F'va'<cr>
" }}}
" Next "" {{{
"vnoremap <silent> in" :<C-U>normal! f"vi"<cr>
"onoremap <silent> in" :<C-U>normal! f"vi"<cr>
"vnoremap <silent> an" :<C-U>normal! f"va"<cr>
"onoremap <silent> an" :<C-U>normal! f"va"<cr>

"vnoremap <silent> il" :<C-U>normal! F"vi"<cr>
"onoremap <silent> il" :<C-U>normal! F"vi"<cr>
"vnoremap <silent> al" :<C-U>normal! F"va"<cr>
"onoremap <silent> al" :<C-U>normal! F"va"<cr>
" }}}

" }}}
" Quickreturn ----------------------------------------------------------------- {{{

inoremap <c-cr> <esc>A<cr>
inoremap <s-cr> <esc>A:<cr>

" }}}
" Error toggles --------------------------------------------------------------- {{{

" Tame the quickfix window (open/close using f4)
nmap <silent> <f4> :QFixToggle<cr>
nmap <silent> <f3> :ErrorsToggle<cr>

" }}}
" Persistent echo ------------------------------------------------------------- {{{

" http://vim.wikia.com/wiki/Make_echo_seen_when_it_would_otherwise_disappear_and_go_unseen
"
" further improvement in restoration of the &updatetime. To make this
" usable in the plugins, we want it to be safe for the case when
" two plugins use same this same technique. Two independent
" restorations of &ut can run in unpredictable sequence. In order to
" make it safe, we add additional check in &ut restoration.
let s:Pecho=''
fu! s:Pecho(msg)
  let s:hold_ut=&ut | if &ut>1|let &ut=1|en
  let s:Pecho=a:msg
  aug Pecho
    au CursorHold * if s:Pecho!=''|echo s:Pecho
          \|let s:Pecho=''|if s:hold_ut > &ut |let &ut=s:hold_ut|en|en
          \|aug Pecho|exe 'au!'|aug END|aug! Pecho
  aug END
endf

" }}}
" Open quoted ----------------------------------------------------------------- {{{

nnoremap <silent> ø :OpenQuoted<cr>
command! OpenQuoted call OpenQuoted()

" Open the file in the current (or next) set of quotes.
function! OpenQuoted() " {{{
    let @r = ''

    exe 'normal! vi' . "'" . '"ry'

    if len(@r) == 0
        exe 'normal! i' . '"' . '"ry'
    endif

    if len(@r) == 0
        exe 'normal! "ry'
        let @r = ''
    endif

    exe "silent !open ." . @r
endfunction " }}}


" Restore cursor position upon reopening files {{{
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
" }}}

" Common abbreviations / misspellings {{{
source ~/.vim/autocorrect.vim
" }}}

" Extra vi-compatibility {{{
" set extra vi-compatible options
set cpoptions+=$     " when changing a line, don't redisplay, but put a '$' at
                     " the end during the change
set formatoptions-=o " don't start new lines w/ comment leader on pressing 'o'
au filetype vim set formatoptions-=o
                     " somehow, during vim filetype detection, this gets set
                     " for vim files, so explicitly unset it again
" }}}

" Extra user or machine specific settings {{{
source ~/.user.vim
" }}}

" Creating underline/overline headings for markup languages
" Inspired by http://sphinx.pocoo.org/rest.html#sections
nnoremap <leader>1 yyPVr=jyypVr=
nnoremap <leader>2 yyPVr*jyypVr*
nnoremap <leader>3 yypVr=
nnoremap <leader>4 yypVr-
nnoremap <leader>5 yypVr^
nnoremap <leader>6 yypVr"   

" }}}
" MacVim ---------------------------------------------------------------------- {{{

if has('gui_running')
    " Enable mouse wheel
    " In Mac, Only on iTerm.app, disable on Terminal.app
    if has('mac')
        set mouse=a
        set ttymouse=xterm2
    endif

    set guifont=Anonymous\ Pro\ for\ Powerline:h14
    set guioptions-=T          	" remove the toolbar
    set lines=40               	" 40 lines of text instead of 24,
    set columns=80
    set transparency=5          " Make the window slightly transparent

    "winpos 0 0
    if ! &diff
        winsize 130 90
    else
        winsize 227 90
    endif

    " Remove all the UI cruft
    set go-=T
    set go-=l
    set go-=L
    set go-=r
    set go-=R

    " PeepOpen
    if has("gui_macvim")
      map <leader><leader><leader> <Plug>PeepOpen
    end

    highlight SpellBad term=underline gui=undercurl guisp=Orange

    " Use a line-drawing char for pretty vertical splits.
    set fillchars=vert:│

    " Hide the mouse pointer while typing
    set mousehide

    " Set up the gui cursor to look nice
    set guicursor=n-c:block-Cursor-blinkon0
    set guicursor+=v:block-vCursor-blinkon0
    set guicursor+=ve:ver35-Cursor
    set guicursor+=o:hor50-Cursor
    set guicursor+=i-ci:ver25-Cursor
    set guicursor+=r-cr:hor20-Cursor
    set guicursor+=sm:block-Cursor-blinkwait175-blinkoff150-blinkon175

    " Use the normal HIG movements, except for M-Up/Down
    let macvim_skip_cmd_opt_movement = 1
    no   <D-Left>       <Home>
    no!  <D-Left>       <Home>
    no   <M-Left>       <C-Left>
    no!  <M-Left>       <C-Left>

    no   <D-Right>      <End>
    no!  <D-Right>      <End>
    no   <M-Right>      <C-Right>
    no!  <M-Right>      <C-Right>

    no   <D-Up>         <C-Home>
    ino  <D-Up>         <C-Home>
    imap <M-Up>         <C-o>{

    no   <D-Down>       <C-End>
    ino  <D-Down>       <C-End>
    imap <M-Down>       <C-o>}

    imap <M-BS>         <C-w>
    inoremap <D-BS>     <esc>my0c`y
else
  set term=builtin_ansi       " Make arrow and other keys work
endif

" }}}

" _ Vim {{{
augroup ft_vim
    au!

    au FileType vim setlocal foldmethod=marker
    au FileType help setlocal textwidth=78
    au BufWinEnter *.txt if &ft == 'help' | wincmd L | endif
augroup END
" }}}

" EXTENSIONS {{{

" _. Scratch {{{
source ~/.vim/functions/scratch_toggle.vim
" }}}

" _. Buffer Handling {{{
source ~/.vim/functions/buffer_handling.vim
" }}}

" _. Tab {{{
source ~/.vim/functions/insert_tab_wrapper.vim
" }}}

" _. Text Folding {{{
"source ~/.vim/functions/my_fold_text.vim
" }}}

" _. Gist {{{
" Send visual selection to gist.github.com as a private, filetyped Gist
" Requires the gist command line too (brew install gist)
vnoremap <leader>G :w !gist -p -t %:e \| pbcopy<cr>
" }}}

" }}}
" TEXT OBJECTS {{{

" Shortcut for [] motion
onoremap ir i[
onoremap ar a[
vnoremap ir i[
vnoremap ar a[

" }}}

" Load addidional configuration (ie to overwrite shorcuts) {{{
if filereadable(expand("~/.vim/after.vimrc"))
  source ~/.vim/after.vimrc
endif
" }}}

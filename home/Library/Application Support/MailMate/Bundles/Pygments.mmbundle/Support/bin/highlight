#!/bin/bash

DEBUG_ENABLED=$(defaults read com.freron.MailMate MmDebugPygmentsEnabled 2>/dev/null)
STYLE=$(defaults read com.freron.MailMate MmDefaultPygmentsStyleName 2>/dev/null)
# TMPFILE=$(mktemp -t pygments_data) || exit 1
# cat - >"${TMPFILE}"

# If CODE_LANGUAGE is empty then pass option -g because if -g is passed, attempt
# to guess the lexer from the file contents, or pass through as plain text if
# this fails (this can work for stdin).

# This will return true if a variable is unset or set to the empty string ("").
if [ -z "${CODE_LANGUAGE}" ]; then
  LEXER_ARG='-g'
else
  if [[ "$CODE_LANGUAGE" =~ ^language-.* ]]; then
    CODE_LANGUAGE=${CODE_LANGUAGE#"language-"}
  fi
  LEXER_ARG="-l ${CODE_LANGUAGE}"
fi

OPTION_ARG="-O noclasses=0,nowrap=0,nobackground=1,wrapcode=1,style=${STYLE:-github}"

if [ "$DEBUG_ENABLED" = 1 ] ; then
  echo "TMPFILE: ${TMPFILE}" >> "${HOME}/MailMate.log"
  cat "${TMPFILE}" >> "${HOME}/MailMate.log"
  echo "STYLE: ${STYLE}" >> "${HOME}/MailMate.log"
  echo "CODE_LANGUAGE: ${CODE_LANGUAGE}" >> "${HOME}/MailMate.log"
  TEST1=$(eval "pygmentize -f html ${OPTION_ARG} ${LEXER_ARG} ${TMPFILE}")
  echo "TEST1: ${TEST1}" >> "${HOME}/MailMate.log"
fi

eval "pygmentize -f html ${OPTION_ARG} ${LEXER_ARG}"
# eval "pygmentize -f html ${OPTION_ARG} ${LEXER_ARG} ${TMPFILE}"

# to get the style contents `pygmentize -S github -f html`

# `pygmentize -H formatter html`:

# Format tokens as HTML 4 ``<span>`` tags within a ``<pre>`` tag, wrapped
# in a ``<div>`` tag. The ``<div>``'s CSS class can be set by the `cssclass`
# option.

# If the `linenos` option is set to ``"table"``, the ``<pre>`` is
# additionally wrapped inside a ``<table>`` which has one row and two
# cells: one containing the line numbers and one containing the code.
# Example:

# .. sourcecode:: html

#     <div class="highlight" >
#     <table><tr>
#       <td class="linenos" title="click to toggle"
#         onclick="with (this.firstChild.style)
#                  { display = (display == '') ? 'none' : '' }">
#         <pre>1
#         2</pre>
#       </td>
#       <td class="code">
#         <pre><span class="Ke">def </span><span class="NaFu">foo</span>(bar):
#           <span class="Ke">pass</span>
#         </pre>
#       </td>
#     </tr></table></div>

# (whitespace added to improve clarity).

# Wrapping can be disabled using the `nowrap` option.

# A list of lines can be specified using the `hl_lines` option to make these
# lines highlighted (as of Pygments 0.11).

# With the `full` option, a complete HTML 4 document is output, including
# the style definitions inside a ``<style>`` tag, or in a separate file if
# the `cssfile` option is given.

# When `tagsfile` is set to the path of a ctags index file, it is used to
# generate hyperlinks from names to their definition.  You must enable
# `lineanchors` and run ctags with the `-n` option for this to work.  The
# `python-ctags` module from PyPI must be installed to use this feature;
# otherwise a `RuntimeError` will be raised.

# The `get_style_defs(arg='')` method of a `HtmlFormatter` returns a string
# containing CSS rules for the CSS classes used by the formatter. The
# argument `arg` can be used to specify additional CSS selectors that
# are prepended to the classes. A call `fmter.get_style_defs('td .code')`
# would result in the following CSS classes:

# .. sourcecode:: css

#     td .code .kw { font-weight: bold; color: #00FF00 }
#     td .code .cm { color: #999999 }
#     ...

# If you have Pygments 0.6 or higher, you can also pass a list or tuple to the
# `get_style_defs()` method to request multiple prefixes for the tokens:

# .. sourcecode:: python

#     formatter.get_style_defs(['div.syntax pre', 'pre.syntax'])

# The output would then look like this:

# .. sourcecode:: css

#     div.syntax pre .kw,
#     pre.syntax .kw { font-weight: bold; color: #00FF00 }
#     div.syntax pre .cm,
#     pre.syntax .cm { color: #999999 }
#     ...

# Additional options accepted:

# `nowrap`
#     If set to ``True``, don't wrap the tokens at all, not even inside a ``<pre>``
#     tag. This disables most other options (default: ``False``).

# `full`
#     Tells the formatter to output a "full" document, i.e. a complete
#     self-contained document (default: ``False``).

# `title`
#     If `full` is true, the title that should be used to caption the
#     document (default: ``''``).

# `style`
#     The style to use, can be a string or a Style subclass (default:
#     ``'default'``). This option has no effect if the `cssfile`
#     and `noclobber_cssfile` option are given and the file specified in
#     `cssfile` exists.

# `noclasses`
#     If set to true, token ``<span>`` tags (as well as line number elements)
#     will not use CSS classes, but inline styles. This is not recommended
#     for larger pieces of code since it increases output size by quite a bit
#     (default: ``False``).

# `classprefix`
#     Since the token types use relatively short class names, they may clash
#     with some of your own class names. In this case you can use the
#     `classprefix` option to give a string to prepend to all Pygments-generated
#     CSS class names for token types.
#     Note that this option also affects the output of `get_style_defs()`.

# `cssclass`
#     CSS class for the wrapping ``<div>`` tag (default: ``'highlight'``).
#     If you set this option, the default selector for `get_style_defs()`
#     will be this class.

#     .. versionadded:: 0.9
#        If you select the ``'table'`` line numbers, the wrapping table will
#        have a CSS class of this string plus ``'table'``, the default is
#        accordingly ``'highlighttable'``.

# `cssstyles`
#     Inline CSS styles for the wrapping ``<div>`` tag (default: ``''``).

# `prestyles`
#     Inline CSS styles for the ``<pre>`` tag (default: ``''``).

#     .. versionadded:: 0.11

# `cssfile`
#     If the `full` option is true and this option is given, it must be the
#     name of an external file. If the filename does not include an absolute
#     path, the file's path will be assumed to be relative to the main output
#     file's path, if the latter can be found. The stylesheet is then written
#     to this file instead of the HTML file.

#     .. versionadded:: 0.6

# `noclobber_cssfile`
#     If `cssfile` is given and the specified file exists, the css file will
#     not be overwritten. This allows the use of the `full` option in
#     combination with a user specified css file. Default is ``False``.

#     .. versionadded:: 1.1

# `linenos`
#     If set to ``'table'``, output line numbers as a table with two cells,
#     one containing the line numbers, the other the whole code.  This is
#     copy-and-paste-friendly, but may cause alignment problems with some
#     browsers or fonts.  If set to ``'inline'``, the line numbers will be
#     integrated in the ``<pre>`` tag that contains the code (that setting
#     is *new in Pygments 0.8*).

#     For compatibility with Pygments 0.7 and earlier, every true value
#     except ``'inline'`` means the same as ``'table'`` (in particular, that
#     means also ``True``).

#     The default value is ``False``, which means no line numbers at all.

#     **Note:** with the default ("table") line number mechanism, the line
#     numbers and code can have different line heights in Internet Explorer
#     unless you give the enclosing ``<pre>`` tags an explicit ``line-height``
#     CSS property (you get the default line spacing with ``line-height:
#     125%``).

# `hl_lines`
#     Specify a list of lines to be highlighted.

#     .. versionadded:: 0.11

# `linenostart`
#     The line number for the first line (default: ``1``).

# `linenostep`
#     If set to a number n > 1, only every nth line number is printed.

# `linenospecial`
#     If set to a number n > 0, every nth line number is given the CSS
#     class ``"special"`` (default: ``0``).

# `nobackground`
#     If set to ``True``, the formatter won't output the background color
#     for the wrapping element (this automatically defaults to ``False``
#     when there is no wrapping element [eg: no argument for the
#     `get_syntax_defs` method given]) (default: ``False``).

#     .. versionadded:: 0.6

# `lineseparator`
#     This string is output between lines of code. It defaults to ``"\n"``,
#     which is enough to break a line inside ``<pre>`` tags, but you can
#     e.g. set it to ``"<br>"`` to get HTML line breaks.

#     .. versionadded:: 0.7

# `lineanchors`
#     If set to a nonempty string, e.g. ``foo``, the formatter will wrap each
#     output line in an anchor tag with a ``name`` of ``foo-linenumber``.
#     This allows easy linking to certain lines.

#     .. versionadded:: 0.9

# `linespans`
#     If set to a nonempty string, e.g. ``foo``, the formatter will wrap each
#     output line in a span tag with an ``id`` of ``foo-linenumber``.
#     This allows easy access to lines via javascript.

#     .. versionadded:: 1.6

# `anchorlinenos`
#     If set to `True`, will wrap line numbers in <a> tags. Used in
#     combination with `linenos` and `lineanchors`.

# `tagsfile`
#     If set to the path of a ctags file, wrap names in anchor tags that
#     link to their definitions. `lineanchors` should be used, and the
#     tags file should specify line numbers (see the `-n` option to ctags).

#     .. versionadded:: 1.6

# `tagurlformat`
#     A string formatting pattern used to generate links to ctags definitions.
#     Available variables are `%(path)s`, `%(fname)s` and `%(fext)s`.
#     Defaults to an empty string, resulting in just `#prefix-number` links.

#     .. versionadded:: 1.6

# `filename`
#     A string used to generate a filename when rendering ``<pre>`` blocks,
#     for example if displaying source code.

#     .. versionadded:: 2.1

# `wrapcode`
#     Wrap the code inside ``<pre>`` blocks using ``<code>``, as recommended
#     by the HTML5 specification.

#     .. versionadded:: 2.4

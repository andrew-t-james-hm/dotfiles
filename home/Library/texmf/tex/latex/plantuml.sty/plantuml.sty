%% This is file `plantuml.sty',
%%
%% latex and xelatex style to process plantuml code
%%
%% The package may take two options at load time: `inline` or `attach`. These
%% options can also be set at any time with the `\pumlsetup{<options>}` command,
%% or specified individually in the optional argument to each `puml` environment
%% or `pumlinclude` command.
%%
%% The `inline` option uses Plantuml's tkiz output whereby included graphics
%% have their labels typeset in the environment of the document they are
%% contained within. Otherwise the Plantuml graphics are self-contained and
%% their formatting is independent of the document. Please note that the
%% plantuml latex format generated tikz pictures have some
%% spacing/padding/marigin issues and do not support all formatting.
%% Using eps provides lossless quality as well.
%%
%% The `attach` option allows generated graphics to be embedded within the PDF
%% using the `attachfile2` package; please load that package separately if you
%% wish to use it. The `attach` option takes precedence over the `inline`
%% option.
%%
%% This package produces quite a number of output files, which by default are
%% created in the same directory as the LaTeX document that is being compiled.
%% To keep things more tidy, you can specify an output directory for these files
%% by defining the `\pumldir` command. For example, if you wish to store the
%% figure files in the subdirectory `pumltmp/`, the you would write
%% `\renewcommand\pumldir{pumltmp}`.
%%
%% Alternatively (and tentatively), you may write `dir=pumltmp` in either the
%% `puml` environment options or the options to `\pumlsetup`.
%%
%% Commands for inserting PlantUML graphics
%%
%% The main environment defined by the package is the `puml` environment, in
%% which verbatim PlantUML code is placed that will be compiled for generating a
%% graphic in the document. For example,
%%
%% \begin{verbatim}
%% \begin{figure}
%%   \begin{puml}[<options>]
%%     <PLANTUML CODE>
%%   \end{puml}
%%   \caption{}\label{}
%% \end{figure}
%% \end{verbatim}
%%
%% If you have PlantUML code in a separate file, you can include it with
%% the `\pumlinclude[<options>]{<filename>}` command.
%%
%% For PlantUML code that should be included in _every_ graphic, define it using
%% the `pumldef` environment.
%%
%% Graphics options
%%
%% Both the `puml` environment and the `\pumlinclude` command take optional
%% parameters for controlling aspects of the graphics creation. In addition to
%% locally setting `inline` and `attach`, the following options may also be
%% used:
%%
%% `width` Width of the figure
%% `height` Height of the figure
%% `keepAspect` Maintain aspect ratio [default true]
%%
%% These may also be set globally using the `\pumlsetup` command.
%%
%% Processing the document
%%
%% After running LaTeX on the document, it is necessary to process the
%% PlantUML graphics so they can be included in the next compilation. The
%% simplest procedure is a recipe such as
%%
%% pdflatex mydoc
%% plantuml -failfast2 -nbtread auto -charset UTF-8 -tpdf mydoc-*.puml
%% pdflatex mydoc
%%
%% This technique will recompile each graphic every time, however. To only
%% recompile graphics that have changed, use the `latexmk` tool.
\def\plantumlVersion{1.0.0}
\ProvidesPackage{plantuml}[2021/01/28 \plantumlVersion{} Plantuml]
%
% Implementation
% \def\Plantuml{{\tt Plantuml}}
\InputIfFileExists{\jobname.pre}{}{}
%
% Allocations
\newbox\PUMLbox
\newdimen\PUMLdimen
\newcounter{puml}
\newwrite\PumlStream
\newwrite\PumlPreStream
\newif\ifPUMLinline
\newif\ifPUMLattach
\newif\ifPUMLkeepAspect
\PUMLkeepAspecttrue
%
% Packages
\RequirePackage{keyval}
\RequirePackage{ifthen}
\RequirePackage{color,graphicx}
\RequirePackage{catchfile} % \CatchFileDef used in \pumlinclude.
%
% Ensuring attachfile2 is loaded if [attach] is requested
\newif\if@puml@attachfile@loaded
\AtBeginDocument{%
  \@ifpackageloaded{attachfile2}{\@puml@attachfile@loadedtrue}{}%
  \let\puml@check@attachfile\puml@check@attachfile@loaded
}
\newcommand\puml@check@attachfile@loaded{%
  \if@puml@attachfile@loaded\else
    \PackageError{plantuml}{You must load the attachfile2 package}{^^J%
      You have requested the [attach] option for some or all of your^^J%
      Plantuml graphics, which requires the attachfile2 package.^^J%
      Please load it in the document preamble.^^J%
    }%
  \fi
}
\newcommand\puml@check@attachfile{%
  \AtBeginDocument{\puml@check@attachfile@loaded}%
  \let\puml@check@attachfile\@empty
}
%
% Macros
\def\csarg#1#2{\expandafter#1\csname#2\endcsname}
%
% Package options
\DeclareOption{inline}{%
  \PUMLinlinetrue
}
\DeclareOption{attach}{%
  \puml@check@attachfile
  \PUMLattachtrue
}
\ProcessOptions*
\def\pumllatexdir{}
\def\pumldir{}
\def\PUMLpumldir{}
\def\PUMLprefix{}
%
\typeout{This is Plantuml v\plantumlVersion}
%
%% hint from https://tex.stackexchange.com/a/86355/9075
% \makeatletter
% \def\maxwidth#1{\ifdim\Gin@nat@width>#1 #1\else\Gin@nat@width\fi}
% \makeatother
%
% Testing for PDF output: Note this is not quite the same as \ifpdf, since we
% still want PDF output when using XeTeX.
\newif\ifPUMLPDF
\ifxetex
  \PUMLPDFtrue
  \usepackage{everypage}
\else
  \ifpdf
    \PUMLPDFtrue
  \fi
\fi
\ifPUMLPDF
  \def\PumlExtension{pdf}
\else
  \def\PumlExtension{eps}
\fi
%
% Bug squashing
\def\unquoteJobname#1"#2"#3\relax{%
  \def\rawJobname{#1}%
  \ifx\rawJobname\empty
    \def\rawJobname{#2}%
  \fi
}
\expandafter\unquoteJobname\jobname""\relax
%
% Work around jobname bug in MiKTeX 2.5 and 2.6: Turn stars in file names
% (resulting from spaces, etc.) into minus signs
\def\fixstar#1*#2\relax{%
  \def\argtwo{#2}%
  \ifx\argtwo\empty
    \gdef\Jobname{#1}%
  \else
    \fixstar#1-#2\relax
  \fi
}
\expandafter\fixstar\rawJobname*\relax
%
% Work around bug in dvips.def and allow spaces in file name
\def\Ginclude@eps#1{%
  \message{<#1>}%
  \bgroup
  \def\@tempa{!}%
  \dimen@\Gin@req@width
  \dimen@ii.1bp\relax
  \divide\dimen@\dimen@ii
  \@tempdima\Gin@req@height
  \divide\@tempdima\dimen@ii
    \special{PSfile=#1\space
      llx=\Gin@llx\space
      lly=\Gin@lly\space
      urx=\Gin@urx\space
      ury=\Gin@ury\space
      \ifx\Gin@scalex\@tempa\else rwi=\number\dimen@\space\fi
      \ifx\Gin@scaley\@tempa\else rhi=\number\@tempdima\space\fi
      \ifGin@clip clip\fi}%
  \egroup
}
%
% Input/Output
\immediate\openout\PumlPreStream=\jobname.pre\relax
\AtEndDocument{\immediate\closeout\PumlPreStream}
\def\WritePumlLine#1{%
  \immediate\write\PumlStream{\detokenize{#1}}%
}
\def\globalPUMLdefs{}
\def\WriteGlobalPumlLine#1{%
  \expandafter\g@addto@macro
  \expandafter\globalPUMLdefs
  \expandafter{\detokenize{#1^^J}}%
}
%
% Commands for verbatim processing environments
\def\ProcessPlantuml#1{%
  \begingroup
  \def\CurrentPlantuml{#1}%
  \let\do\@makeother \dospecials
  \@makeother\^^L% and whatever other special cases
  \catcode`\ =10
  \endlinechar`\^^M \catcode`\^^M=12 \xPlantuml
}
% Need lots of comment chars here because hline endi is no longer a space character.
\begingroup
  \catcode`\^^M=12 \endlinechar=-1\relax%
  \gdef\xPlantuml{%
    \expandafter\ProcessPlantumlLine%
  }
  \gdef\ProcessPlantumlLine#1^^M{%
    \def\@tempa{#1}%
    {%
      \escapechar=-1\relax%
      \xdef\@tempb{\string\\end\string\{\CurrentPlantuml\string\}}%
    }%
    \ifx\@tempa\@tempb%
      \edef\next{\endgroup\noexpand\end{\CurrentPlantuml}}%
    \else%
      \ThisPlantuml{#1}%
      \let\next\ProcessPlantumlLine%
    \fi%
    \next%
  }
\endgroup
\def\puml@init{%
  \def\PUMLlatexdir{}%
  \ifx\pumllatexdir\empty\else
    \def\PUMLlatexdir{\pumllatexdir/}%
  \fi
  \ifx\pumldir\empty\else
    \def\PUMLpumldir{\pumldir/}%
  \fi
  \def\PUMLprefix{\PUMLlatexdir\PUMLpumldir}%
}
%
% User interface
\newcommand{\puml}[1][]{%
  \stepcounter{puml}%
  \setkeys{PUMLkeys}{#1}%
% Disable the "inline" option if "attach" is enabled:
  \ifPUMLattach
    \PUMLinlinefalse
  \fi
  \puml@init
  \immediate\write\PumlPreStream{%
    \noexpand\InputIfFileExists{%
      \PUMLprefix\noexpand\jobname-\the\c@puml.pre}{}{}%
  }%
  \puml@write@graphic@header
  \let\ThisPlantuml\WritePumlLine
  \ProcessPlantuml{puml}%
}
\def\endpuml{%
  \puml@finalise@stream
  \puml@input@graphic
}
\def\puml@write@graphic@header{%
  \immediate\openout\PumlStream=\PUMLpumldir\jobname-\the\c@puml.puml\relax
  \gdef\PumlFile{\PUMLprefix\Jobname-\the\c@puml}%
  \immediate\write\PumlStream{%
    ' powered by: plantuml v\plantumlVersion^^J%
    ' filename "\Jobname-\the\c@puml.puml"^^J%
    \globalPUMLdefs
  }%
}
%
% TODO: Add a maxwidth options to output `width=\maxwidth{\textwidth}` to the
% options we pass to includegraphics, see this hint from
% https://tex.stackexchange.com/a/86355/9075
% TODO: Include more of the options from ctan/graphicx
\def\puml@finalise@stream{%
  \def\reptemp{}%
% Setting size(): Only inserted if one of the dimensions is set explicitly
% (i.e., if both height and width are not empty).
  \ifx\PUMLwidth\@empty
    \ifx\PUMLheight\@empty
      % write nothing!
    \else
      \g@addto@macro\reptemp{height=\PUMLheight}%
      \ifPUMLkeepAspect \g@addto@macro\reptemp{,keepaspectratio} \fi%
    \fi
  \else
    \ifx\PUMLheight\@empty
      \g@addto@macro\reptemp{width=\PUMLwidth}%
      \ifPUMLkeepAspect \g@addto@macro\reptemp{,keepaspectratio} \fi%
    \else
      \g@addto@macro\reptemp{width=\PUMLwidth,height=\PUMLheight}%
      \ifPUMLkeepAspect \g@addto@macro\reptemp{,keepaspectratio} \fi%
    \fi
  \fi
  \immediate\closeout\PumlStream
}
% `\includegraphics` does not expand its first argument therefore to pass the
% variable, `reptemp` to their options, a judicious use of `\expandafter`
% resolves that part of the problem.
\def\puml@input@graphic{%
  \ifPUMLinline
    \IfFileExists{"\PumlFile.latex"}{%
      \catcode`:=12\relax
      \@@input"\PumlFile.latex"\relax
    }{%
      \PackageWarning{plantuml}{file `\PumlFile.latex' not found}%
    }%
  \else
    \IfFileExists{"\PumlFile.\PumlExtension"}{%
      \ifPUMLattach
        \ifPUMLPDF
          \IfFileExists{"\PumlFile+0.pdf"}{%
            \setbox\PUMLbox=\hbox{\expandafter\includegraphics\expandafter[\reptemp]{\PumlFile+0.pdf}}%
          }{%
            \setbox\PUMLbox=\hbox{\expandafter\includegraphics\expandafter[\reptemp]{\PumlFile.pdf}}%
          }%
        \else
          \setbox\PUMLbox=\hbox{\expandafter\includegraphics\expandafter[\reptemp]{\PumlFile.eps}}%
        \fi
        \textattachfile{\PumlFile.\PumlExtension}{\phantom{\copy\PUMLbox}}%
        \vskip-\ht\PUMLbox
        \indent
        \box\PUMLbox
      \else
        \ifPUMLPDF
          \expandafter\includegraphics\expandafter[\reptemp]{\PumlFile.pdf}%
        \else
          \expandafter\includegraphics\expandafter[\reptemp]{\PumlFile.eps}%
        \fi
      \fi
    }{% force inline if there is no file with pdf/eps ext, but there is a txik file with latex ext
      \IfFileExists{"\PumlFile.latex"}{%
        \catcode`:=12
        \@@input"\PumlFile.latex"\relax
      }{%
        \PackageWarning{plantuml}{%
          file `\PumlFile.\PumlExtension' not found%
        }%
      }%
    }%
  \fi
}
\def\pumldef{%
  \let\ThisPlantuml\WriteGlobalPumlLine
  \ProcessPlantuml{pumldef}%
}
\newcommand\pumlinclude[2][]{%
  \begingroup
  \stepcounter{puml}%
  \setkeys{PUMLkeys}{#1}%
  \ifPUMLattach
    \PUMLinlinefalse
  \fi
  \puml@init
  \immediate\write\PumlPreStream{%
    \noexpand\InputIfFileExists{%
      \PUMLprefix\noexpand\jobname-\the\c@puml.pre}{}{}%
  }%
  \puml@write@graphic@header
  \IfFileExists{#2.puml}{%
    \CatchFileDef\@tempa{#2.puml}{%
      \let\do\@makeother
      \dospecials
      \endlinechar=10\relax
    }%
  }{%
    \IfFileExists{#2}{%
      \CatchFileDef\@tempa{#2}{%
        \let\do\@makeother
        \dospecials
        \endlinechar=10\relax
      }%
    }{%
      \PackageWarning{plantuml}{file #2 not found}%
      \def\@tempa{}%
    }%
  }%
  \immediate\write\PumlStream{\unexpanded\expandafter{\@tempa}}%
  \puml@finalise@stream
  \puml@input@graphic
  \endgroup
}
\newcommand{\PUMLanimategraphics}[5][]{%
  \IfFileExists{_#3.pdf}{%
    \animategraphics[{#1}]{#2}{_#3}{#4}{#5}%
  }{}%
}
% Keys for graphics processing
\newcommand\pumlsetup[1]{\setkeys{PUMLkeys}{#1}}
\define@key{PUMLkeys}{dir}{%
  \def\pumldir{#1}%
}
\def\PUMLwidth{}
\define@key{PUMLkeys}{width}{%
  \edef\PUMLwidth{\the\dimexpr#1\relax}%
}
\def\PUMLheight{}
\define@key{PUMLkeys}{height}{%
  \edef\PUMLheight{\the\dimexpr#1\relax}%
}
\define@key{PUMLkeys}{keepAspect}[true]{%
  \ifthenelse{\equal{#1}{true}}
    {\PUMLkeepAspecttrue}
    {\PUMLkeepAspectfalse}%
}
\define@key{PUMLkeys}{inline}[true]{%
  \ifthenelse{\equal{#1}{true}}
    {\PUMLinlinetrue}
    {\PUMLinlinefalse}%
}
\define@key{PUMLkeys}{attach}[true]{%
  \ifthenelse{\equal{#1}{true}}
    {\PUMLattachtrue}
    {\PUMLattachfalse}%
}
%%
%% End of file `plantuml.sty'.

;; The deps.edn file describes the information needed to build a classpath.
;;
;; deps.edn configuration is a combination of
;; - install-level (latest Clojure version at install time)
;; - user level - $HOME/.clojure/deps.edn
;; - project level - deps.edn in root of project
;;
;; For all attributes other than :paths, these config files are merged left to right.
;; Only the last :paths is kept and others are dropped.

;; see https://github.com/seancorfield/dot-clojure
;; see https://github.com/practicalli/clojure-deps-edn/blob/live/deps.edn
;; The deps.edn file describes the information needed to build a classpath.
;;
;; deps.edn configuration is a combination of
;; - install-level (latest Clojure version at install time)
;; - user level - $HOME/.clojure/deps.edn
;; - project level - deps.edn in root of project
;;
;; For all attributes other than :paths, these config files are merged left to right.
;; Only the last :paths is kept and others are dropped.

{;; Paths
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; Directories in the current project to include in the classpath
 ;; - typically defined in the project deps.edn file
 ;; :paths ["src" "resource"]


 ;; External dependencies
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 :deps
 {org.clojure/clojure {:mvn/version "1.10.1"}}

 :aliases
 {
  ;;   resolve-deps aliases (-R) affect dependency resolution, options:
  ;;     :extra-deps - specifies extra deps to add to :deps
  ;;     :override-deps - specifies a coordinate to use instead of that in :deps
  ;;     :default-deps - specifies a coordinate to use for a lib if one isn't found
  ;;   make-classpath aliases (-C) affect the classpath generation, options:
  ;;     :extra-paths - vector of additional paths to add to the classpath
  ;;     :classpath-overrides - map of lib to path that overrides the result of resolving deps


  ;; Creating projects from templates
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; https://github.com/seancorfield/clj-new
  ;;
  ;; clj -A:new template-name domain/namespace
  ;; clj -m myname.myapp
  ;; clj -A:test:runner
  :new
  {:extra-deps {seancorfield/clj-new {:mvn/version "1.0.199"}}
   :main-opts  ["-m" "clj-new.create"]}


  ;; REPL experience
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; Clojure REPL with syntax highlighting, built in docs and a quit command `:repl/quit`

  :rebel
  {:extra-deps {com.bhauman/rebel-readline {:mvn/version "0.1.4"}}
   :main-opts  ["-m" "rebel-readline.main"]}


  ;; ClojureScript REPL rebel readline service
  ;; https://github.com/bhauman/rebel-readline/tree/master/rebel-readline-cljs
  ;; Starts the default CLJS repl, eg. nashorn

  :rebel-cljs
  {:extra-deps {com.bhauman/rebel-readline-cljs {:mvn/version "0.1.4"}}
   :main-opts  ["-m" "rebel-readline-cljs.main"]}


  ;; rebel readline with nrepl for editor connection to REPL
  ;; CIDER: run `cider-connect-clj` and expressions evaluated in rebel
  ;; are also available from CIDER/Emacs/Spacemacs
  :rebel-nrepl
  {:extra-deps {nrepl/nrepl                {:mvn/version "0.8.0-alpha5"}
                cider/cider-nrepl          {:mvn/version "0.25.2"}
                com.bhauman/rebel-readline {:mvn/version "0.1.4"}}
   :main-opts  ["-m" "nrepl.cmdline"
                "--middleware" "[cider.nrepl/cider-middleware]"
                "-i"
                "-f" "rebel-readline.main/-main"]}


  ;; Include a `dev` path when running the repl
  ;; enabling the use of a `dev/user.clj` file
  ;; to configure actions as soon as the REPL starts
  ;; http://practicalli.github.io/clojure/repl-driven-development/configure-repl-startup.html

  :dev
  {:extra-paths ["dev"]}

  ;; Reveal - read evaluate visualize loop
  ;; A REPL environment with data visualization and exploration
  ;; clj -A:repl-reveal
  ;; Run with theme / font changes
  ;; clojure -A:repl-reveal-themed
  ;; Use with rebel repl by adding and using tap>
  ;; clojure -R:repel-reveal -A: rebel
  ;; clojure -R:repl-reveal -A:rebel -J-Dvlaaad.reveal.prefs='{:theme :light :font-family "Ubuntu Mono" :font-size 32}'
  ;; http://practicalli.github.io/clojure/clojure-tools/data-browsers/reveal.html

  :repl-reveal
  {:extra-deps {vlaaad/reveal {:mvn/version "0.1.0-ea28"}}
   :main-opts  ["-m" "vlaaad.reveal" "repl"]}


  :repl-reveal-themed
  {:extra-deps {vlaaad/reveal {:mvn/version "0.1.0-ea28"}}
   :jvm-opts   ["-Dvlaaad.reveal.prefs={:theme,:light,:font-family,\"https://ff.static.1001fonts.net/u/b/ubuntu.mono.ttf\",:font-size,32}"]
   :main-opts  ["-m" "vlaaad.reveal" "repl"]}

  ;; Cloned repository for hacking the project
  :repl-reveal-local
  {:extra-deps {vlaaad/reveal
                {:local/root "/home/practicalli/projects/clojure/visualization/reveal/"}}
   :main-opts  ["-m" "vlaaad.reveal" "repl"]}

  ;; Reveal REPL with nrepl server, connect to from a Clojure aware editor
  ;; clj -A:repl-reveal-nrepl
  :repl-reveal-nrepl
  {:extra-deps {vlaaad/reveal {:mvn/version "0.1.0-ea26"}
                nrepl/nrepl   {:mvn/version "0.7.0"}}
   :main-opts  ["-m" "nrepl.cmdline"
                "--middleware" "[vlaaad.reveal.nrepl/middleware]"]}


  ;; End of REPL experience
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;




  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Data inspectors / browsers

  ;; Portal
  ;; Navigate data - edn, json, transit
  ;; https://github.com/djblue/portal

  :inspector-portal-cli
  {:extra-deps {djblue/portal {:mvn/version "0.3.0"}}}

  :inspector-portal-web
  {:extra-deps {djblue/portal             {:mvn/version "0.3.0"}
                org.clojure/clojurescript {:mvn/version "1.10.758"}}
   :main-opts  ["-m" "cljs.main"]}

  :inspector-portal-node
  {:extra-deps {djblue/portal             {:mvn/version "0.3.0"}
                org.clojure/clojurescript {:mvn/version "1.10.758"}}
   :main-opts  ["-m" "cljs.main" "-re" "node"]}


  ;; REBL Data browser
  ;; https://github.com/cognitect-labs/REBL-distro
  ;; Download the REBL JAR and update the local/root below
  ;; Requires Clojure 1.10 and either:
  ;; - Oracle JDK 8 -- use :cognitect-rebl-java8
  ;; - OpenJDK 8 or 11 -- use :cognitect-rebl-java11

  :cognitect-rebl-java8
  {:extra-deps {org.clojure/core.async {:mvn/version "0.4.490"}
                ;; deps for file datafication (0.9.149 or later)
                org.clojure/data.csv   {:mvn/version "0.1.4"}
                org.clojure/data.json  {:mvn/version "0.2.3"}
                org.yaml/snakeyaml     {:mvn/version "1.23"}
                ;; adjust to match your install location com.cognitect/rebl
                com.cognitect/rebl     {:local/root "/home/practicalli/.local/apps/rebel/REBL-0.9.220/REBL-0.9.220.jar"}}
   :main-opts  ["-m" "cognitect.rebl"]}


  :cognitect-rebl-java11
  {:extra-deps {org.clojure/clojure         {:mvn/version "1.10.0"}
                org.clojure/core.async      {:mvn/version "0.4.490"}
                com.cognitect/rebl          {:local/root "/home/practicalli/.local/apps/rebel/REBL-0.9.220/REBL-0.9.220.jar"}
                org.openjfx/javafx-fxml     {:mvn/version "11.0.1"}
                org.openjfx/javafx-controls {:mvn/version "11.0.1"}
                org.openjfx/javafx-swing    {:mvn/version "11.0.1"}
                org.openjfx/javafx-base     {:mvn/version "11.0.1"}
                org.openjfx/javafx-web      {:mvn/version "11.0.1"}}
   :main-opts  ["-m" "cognitect.rebl"]}


  ;; nrebl.middleware
  ;; spies on nREPL connection and captures result of evlatuations in REBL
  ;; https://github.com/RickMoynihan/nrebl.middleware
  ;; Command Line (java11):
  ;; clojure -R:nrepl:cider-nrepl:cognitect-rebl-java11 -A:nrebl
  ;; Emacs cider (java11): add following to `dir-locals.el` to root directory of project and run `cider-connect`
  ;; ((clojure-mode . ((cider-clojure-cli-global-options . "-R:nrepl:cider-nrepl:rebl-java11 -A:nrebl.middleware"))))

  :nrebl
  {:extra-deps {nrepl/nrepl                   {:mvn/version "0.7.0"}
                cider/cider-nrepl             {:mvn/version "0.25.0"}
                refactor-nrepl/refactor-nrepl {:mvn/version "2.5.0"}
                rickmoynihan/nrebl.middleware {:mvn/version "0.3.1"}}
   :main-opts  ["-e" "((requiring-resolve,'cognitect.rebl/ui))"
                "-m" "nrepl.cmdline"
                "-i"
                "--middleware" "[nrebl.middleware/wrap-nrebl,cider.nrepl/cider-middleware]"]}

  ;; Supporting aliases for nrebl.middleware

  :nrepl
  {:extra-deps {nrepl/nrepl {:mvn/version "0.7.0"}}}

  :cider-nrepl
  {:extra-deps {cider/cider-nrepl             {:mvn/version "0.25.0"}
                refactor-nrepl/refactor-nrepl {:mvn/version "2.5.0"}}}



  ;; End of REBL data browser
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



  ;; Java Sources
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Look up Java Class and method definitions, eg. `cider-find-var` in Emacs
  ;; Requires: Java sources installed locally
  ;; Examples are from Ubuntu package install locations


  :java-8-source
  {:extra-deps
   {java-sources {:local/root "/usr/lib/jvm/openjdk-8/lib/src.zip"}}}

  :java-11-source
  {:extra-deps
   {java-sources {:local/root "/usr/lib/jvm/openjdk-11/lib/src.zip"}}}



  ;; Testing frameworks
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; Include the test directory as a path used by Clojure CLI tools

  :test-path
  {:extra-paths ["test"]}

  ;; Clojure.test
  ;; Nothing required as it is part of the Clojure library.

  ;; Clojure spec

  :spec
  {:extra-deps {org.clojure/spec.alpha {:mvn/version "0.2.176"}}}


  ;; Clojure spec 2 - under active development

  :spec2
  {:extra-deps {org.clojure/spec-alpha2
                {:git/url "https://github.com/clojure/spec-alpha2"
                 :sha     "495e5ac3238be002b4de72d1c48479f6bec06bb3"}}}


  ;; Expectations test framework
  ;; https://github.com/clojure-expectations/clojure-test
  ;; Example usage:
  ;; clojure -A:expectations:test-runner-cognitect

  :expectations
  {:extra-deps {expectations/clojure-test {:mvn/version "1.2.1"}}}


  ;; Classic version not compatible with clojure.test and tools
  ;; https://github.com/clojure-expectations/expectations

  :expectations-classic
  {:extra-deps {expectations/expectations {:mvn/version "2.1.10"}}}


  ;; Test runners
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; Cognitect test-runner
  ;; https://github.com/cognitect-labs/test-runner

  :test-runner-cognitect
  {:extra-paths ["test"]
   :extra-deps  {com.cognitect/test-runner
                 {:git/url "https://github.com/cognitect-labs/test-runner.git"
                  :sha     "f7ef16dc3b8332b0d77bc0274578ad5270fbfedd"}}
   :main-opts   ["-m" "cognitect.test-runner"]}

  ;; ClojureScript test runner
  ;; https://github.com/Olical/cljs-test-runner

  :test-runner-cljs
  {:extra-paths ["test"]
   :extra-deps  {olical/cljs-test-runner {:mvn/version "3.7.0"}}
   :main-opts   ["-m" "cljs-test-runner.main"]}


  ;; kaocha - comprehensive test runner for Clojure/Script
  ;; tests.edn should be created for each project
  ;; https://github.com/lambdaisland/kaocha

  :test-runner-kaocha
  {:extra-paths ["test"]
   :extra-deps  {lambdaisland/kaocha {:mvn/version "1.0.641"}}
   :main-opts   ["-m" "kaocha.runner"]}


  ;; midje-runner
  ;; https://github.com/miorimmax/midje-runner
  ;; WARNING: unqualified library name: midje-runner
  ;; Unqualified names may break soon
  :test-runner-midje
  {:extra-paths ["test"]
   :extra-deps  {midje-runner
                 {:git/url "https://github.com/miorimmax/midje-runner.git"
                  :sha     "ee9c2813e150ae6b3ea41b446b09ba40fc89bdc1"}}
   :main-opts   ["-m" "midje-runner.runner"]}


  ;; eftest - fast and pretty test runner
  ;; There may be a nicer way to do the main-opts - see the Eastwood and kibit issue discussion
  ;; https://github.com/jonase/eastwood/commit/4d1d05cc6de6ce565207d9a3c86864364f53f006

  :test-runner-eftest
  {:extra-paths ["test"]
   :extra-deps  {eftest/eftest {:mvn/version "0.5.9"}}
   :main-opts   ["-e"  "(require,'[eftest.runner,:refer,[find-tests,run-tests]]),(run-tests,(find-tests,\"test\"))"]}


  ;; Test Coverage tools
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; Cloverage - Simple clojure coverage tool
  ;; https://github.com/cloverage/cloverage
  ;; In the root of your Clojure project, run the command:
  ;; clojure -A:test-coverage
  :test-coverage
  {:extra-paths ["test"]
   :extra-deps  {cloverage/cloverage {:mvn/version "RELEASE"}}
   :main-opts   ["-m" "cloverage.coverage"]}



  ;; Linting/ static analysis
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; clj-kondo - comprehensive and fast linter
  ;; https://github.com/borkdude/clj-kondo/

  :lint
  {:extra-deps {clj-kondo/clj-kondo {:mvn/version "RELEASE"}}
   :main-opts  ["-m" "clj-kondo.main"]}


  ;; Eastwood - classic lint tool
  ;; https://github.com/jonase/eastwood#running-eastwood-in-a-repl

  :lint-eastwood
  {:extra-deps {jonase/eastwood {:mvn/version "RELEASE"}}
   :main-opts  ["-m" "eastwood.lint"
                "{:source-paths,[\"src\"],:test-paths,[\"test\"]}"]}


  ;; kibit - suggest idiomatic use of Clojure
  ;; https://github.com/jonase/kibit/issues/221

  :idiom-check
  {:extra-deps {tvaughan/kibit-runner {:mvn/version "0.2.3"}}
   :main-opts  ["-m" "kibit-runner.cmdline"]}


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; EXPERIMENTAL - use at your own risk, you have been warned
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Carve - search through code for unused vars and remove them
  :carve
  {:extra-deps {borkdude/carve
                {:git/url "https://github.com/borkdude/carve"
                 :sha     "542078b21d72a96848bc342e57aa560339b79698"}}
   :main-opts  ["-m" "carve.main"]}
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  ;; Dependency version management
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; Manage versions for maven and git dependencies
  ;; https://github.com/Olical/depot
  ;; Report dependencies that have newer versions available
  ;; Update library versions in this deps.edn file:
  ;; cd ~/.clojure && clojure -A:outdated

  :outdated
  {:extra-deps {olical/depot {:mvn/version "1.8.4"}}
   :main-opts  ["-m" "depot.outdated.main"]}

  ;; clj -A:outdated-update
  :outdated-update
  {:extra-deps {olical/depot {:mvn/version "1.8.4"}}
   :main-opts  ["-m" "depot.outdated.main"
                "--update"]}


  ;; The classic project for checking maven based dependencies

  :outdated-ancient
  {:extra-deps {deps-ancient/deps-ancient {:mvn/version "RELEASE"}}
   :main-opts  ["-m" "deps-ancient.deps-ancient"]}


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; EXPERIMENTAL - use at your own risk, you have been warned
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Hot loading dependencies - EXPERIMENTAL / APLPHA
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Hot loading is not officially part of tools.deps and
  ;; this alias could change significantly in future

  ;; Add new deps to a running REPL:
  ;; (require '[clojure.tools.deps.alpha.repl :refer [add-lib]])
  ;; (add-lib 'domain/library {:mvn/version "RELEASE"})
  ;; Git deps
  ;; (require '[clojure.tools.gitlibs :as gitlibs])
  ;; (defn load-master [lib]
  ;;   (let [git (str "https://github.com/" lib ".git")]
  ;;    (add-lib lib {:git/url git :sha (gitlibs/resolve git "master")})))
  ;; - e.g., using the GitHub path (not the usual Maven group/artifact):
  ;; (load-master 'clojure/tools.trace)
  :hot-load-deps
  {:extra-deps {org.clojure/tools.deps.alpha
                {:git/url "https://github.com/clojure/tools.deps.alpha"
                 :sha     "19d197ab221d37db750423eb970880cb87a91100"}}
   ;; DynamicClassLoader required for add-lib to work
   ;; if starting other processes via aliases such as a socket REPL or Cognitect's REBL
   :main-opts  ["-e" "(->>(Thread/currentThread)(.getContextClassLoader)(clojure.lang.DynamicClassLoader.)(.setContextClassLoader,(Thread/currentThread)))"]}



  ;; Visualizing dependencies
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; Morpheus - visualize project var relationships
  ;; https://github.com/benedekfazekas/morpheus
  ;; Options:
  ;; -d to specify output directory (this must exist)
  ;; -f to specify image format, dot (default), png or svg
  ;; Options are followed by list of paths to analyze.

  ;; clojure -A:graph-vars -d graphs -f png src test

  :graph-vars
  {:extra-deps {thomasa/morpheus
                {:git/url "https://github.com/benedekfazekas/morpheus.git"
                 :sha     "d3decebc1cb9ef697cd34781f9cf83d44a071e85"}}
   :main-opts  ["-m" "thomasa.morpheus.main"]}

  ;; Generate PNG image of dependency graph in directory called `graphs`
  ;; clojure -A:graph-vars-png
  :graph-vars-png
  {:extra-deps {thomasa/morpheus
                {:git/url "https://github.com/benedekfazekas/morpheus.git"
                 :sha     "d3decebc1cb9ef697cd34781f9cf83d44a071e85"}}
   :main-opts  ["-m" "thomasa.morpheus.main"
                "-d" "graphs" "-f" "png" "src" "test"]}


  ;; Generate SVG image of dependency graph in directory called `graphs`
  ;; clojure -A:graph-vars-svg

  :graph-vars-svg
  {:extra-deps {thomasa/morpheus
                {:git/url "https://github.com/benedekfazekas/morpheus.git"
                 :sha     "d3decebc1cb9ef697cd34781f9cf83d44a071e85"}}
   :main-opts  ["-m" "thomasa.morpheus.main"
                "-d"  "graphs" "-f" "svg" "src" "test"]}




  ;; Visualize connections between library dependencies and project namespaces
  ;; https://github.com/SevereOverfl0w/vizns
  ;; clj -A:graph-deps navigate      # navigable folder of SVGs
  ;; clj -A:graph-deps   # deps-graph.dot file
  ;; clj -A:graph-deps single -o deps-graph.png -f png # png file
  ;; clj -A:graph-deps single -o deps-graph.svg -f svg # svg file
  ;; clj -A:graph-deps single --show  # View graph without saving

  :graph-deps
  {:extra-deps {io.dominic/vizns {:git/url "https://github.com/SevereOverfl0w/vizns.git"
                                  :sha     "fb2391a4af24246ac4e46f3a573970ba5b7c92de"}}
   :main-opts  ["-m" "io.dominic.vizns.core"]}

  ;; Generate single PNG image of library dependencies
  :graph-deps-png
  {:extra-deps {io.dominic/vizns {:git/url "https://github.com/SevereOverfl0w/vizns.git"
                                  :sha     "fb2391a4af24246ac4e46f3a573970ba5b7c92de"}}
   :main-opts  ["-m" "io.dominic.vizns.core" "single" "-o" "deps-graph.png" "-f" "png"]}



  ;; Deployment
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; depstar - build jars, uberjars
  ;; https://github.com/seancorfield/depstar
  ;; clojure -A:depstar -m hf.depstar.jar MyLib.jar
  ;; clojure -A:depstar -m hf.depstar.uberjar MyProject.jar

  :build-depstar
  {:extra-deps
   {seancorfield/depstar {:mvn/version "1.0.94"}}}


  ;; uberdeps - uberjar builder
  ;; https://github.com/tonsky/uberdeps
  ;; "--target" "target/cdeps-0.1.0.jar" in `:main-opts` to specify output file

  :build-uberdeps
  {:extra-deps {uberdeps/uberdeps {:mvn/version "0.1.10"}}
   :main-opts  ["-m" "uberdeps.uberjar"]}


  ;; Deploy library jar installation and deployment
  ;; https://github.com/slipset/deps-deploy
  ;; Deploy Locally (in `~/.m2/`)
  ;; `clojure -A:deploy-locally project.jar`
  ;; Deploy to Clojars
  ;; `clojure -A:deploy-clojars project.jar`
  ;; Deploy to Clojars signed
  ;; `clojure -A:deploy-clojars-signed project.jar`
  ;;
  ;; Set Clojars username/token in `CLOJARS_USERNAME` and `CLOJARS_PASSWORD`
  ;; environment variables.
  ;; Set fully qualified artifact-name and version in project `pom.xml` file

  :deploy-locally
  {:extra-deps {deps-deploy/deps-deploy {:mvn/version "RELEASE"}}
   :main-opts  ["-m" "deps-deploy.deps-deploy"
                "install"]}

  :deploy-clojars
  {:extra-deps {deps-deploy/deps-deploy {:mvn/version "RELEASE"}}
   :main-opts  ["-m" "deps-deploy.deps-deploy"
                "deploy"]}

  :deploy-clojars-signed
  {:extra-deps {deps-deploy/deps-deploy {:mvn/version "RELEASE"}}
   :main-opts  ["-m" "deps-deploy.deps-deploy"
                "deploy"
                :true]}



  ;; Add the path to the jar for deployment to simplify command

  ;; :deploy-locally
  ;; {:extra-deps {deps-deploy/deps-deploy {:mvn/version "RELEASE"}}
  ;;  :main-opts  ["-m" "deps-deploy.deps-deploy"
  ;;               "install"
  ;;               "path/to/my.jar"]}

  ;; {:deploy-clojars
  ;;  {:extra-deps {deps-deploy/deps-deploy {:mvn/version "RELEASE"}}
  ;;   :main-opts  ["-m" "deps-deploy.deps-deploy"
  ;;                "deploy"
  ;;               "path/to/my.jar"]}}


  ;; Performance testing
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; Benchmarking library for Clojure
  ;; https://github.com/hugoduncan/criterium/
  ;; (require '[criterium.core :refer [bench quick-bench]]) ; require criterium
  ;; (bench (adhoc-expression)) ; timing of a self contained expression
  ;;
  ;; (require '[practicalli/namespace-name]) ; require project source code
  ;; (in-ns 'practicalli/namespace-name)
  ;; (quick-bench (project-function args))

  :benchmark
  {:extra-deps {criterium/criterium {:mvn/version "0.4.5"}}}


  ;; - see https://github.com/clojure-goes-fast/clj-memory-meter
  ;; - (require '[clj-memory-meter.core :as memory-meter])
  ;; - (memory-meter/measure (your-expression))


  :measure
  {:extra-deps {com.clojure-goes-fast/clj-memory-meter {:mvn/version "0.1.2"}}}


  } ;; End of alias definitions


 ;; Library Repositories
 ;; Order in which repositories are consulted is not guaranteed, so only add essential repositories
 ;; Maven Central and Clojars are the canonical repositories for library dependencies
 ;; JCenter is large and fast mirror often accessible behind corporate firewalls

 :mvn/repos {"central" {:url "https://repo1.maven.org/maven2/"}
             "clojars" {:url "https://repo.clojars.org/"}

             ;; Clojure snapshots
             ;; "sonatype" {:url "https://oss.sonatype.org/content/repositories/snapshots/"}

             ;; clojars.org mirror - publicly accessible
             ;; "jcenter" {:url "https://jcenter.bintray.com"}

             ;; Maven Central Google Cloud Storage mirrors
             ;; Americas
             ;; "google-maven-central" {:url "https://maven-central.storage-download.googleapis.com/maven2/"}
             ;; Asia
             ;; "google-maven-central" {:url "https://maven-central-asia.storage-download.googleapis.com/maven2/"}
             ;; Europe
             ;; "google-maven-central" {:url "https://maven-central-eu.storage-download.googleapis.com/maven2/"}

             ;; "clojars-china-mirror" {:url "https://mirrors.tuna.tsinghua.edu.cn/clojars/"}

             ;; Example of local Artifactory repository configuration
             ;; {"business-area" {:url "https://artifacts.internal-server.com:443/artifactory/business-area-maven-local"}
             }}

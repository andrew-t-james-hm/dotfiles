# find has a complex filtering syntax all of its own; the following examples
# show some of the most useful filters you can apply to retrieve lists of
# certain files:
# -name '*.c': Find files with names matching a shell-style pattern.
# -iname for a case-insensitive search.
# -path '*test*': Find files with paths matching a shell-style pattern.
# -ipath for a case-insensitive search.
# -mtime -5: Find files edited within the last five days. You can use +5 instead
#   to find files edited before five days ago.
# -newer server.c: Find files more recently modified than server.c.
# -type d: Find directories. For files, use -type f; for symbolic links, use -type l.

# To find files by case-insensitive extension (ex: .jpg, .JPG, .jpG):
find . -iname "*.jpg"

# To find directories:
find . -type d

# To find files:
find . -type f

# To find files by octal permission:
find . -type f -perm 777

# To find files with setuid bit set:
find . -xdev \( -perm -4000 \) -type f -print0 | xargs -0 ls -l

# To find files with extension '.txt' and remove them:
find ./path/ -name '*.txt' -exec rm '{}' \;

# To find files with extension '.txt' and look for a string into them:
find ./path/ -name '*.txt' | xargs grep 'string'

# To find files with size bigger than 5 Mb and sort them by size:
find . -size +5M -type f -print0 | xargs -0 ls -Ssh | sort -z

# To find files bigger thank 2 MB and list them:
find . -type f -size +20000k -exec ls -lh {} \; | awk '{ print $9 ": " $5 }'

# To find files modified more than 7 days ago and list file information
find . -type f -mtime +7d -ls

# To find symlinks owned by a user and list file information
find . -type l --user=username -ls

# To search for and delete empty directories
find . -type d -empty -exec rmdir {} \;

# To search for directories named build at a max depth of 2 directories
find . -maxdepth 2 -name build -type d

# To search all files who are not in .git directory
find . ! -iwholename '*.git*' -type f

# Find all files that have the same node (hard link) as MY_FILE_HERE
find . -type f -samefile MY_FILE_HERE 2>/dev/null

# To search current directory and sub directories for a specific file:
find . -name "rc.conf" -print

# Same, but case insensitive:
find . -iname "rc.conf" -print

# Search for both mpg & avi:
find . -iname '*.mpg' -o -iname '*.avi'

# Same, but files only:
find . -type f -name "rc.conf" -print

# To search the entire filesystem for a specific file:
find / -name "rc.conf" -print

# To search for content inside files:
find . -name "*.css" -exec grep -l "#content" {} \;

# To replace content inside files:
find . -name "*.css" -exec sed -i -r 's/#(FF0000|F00)\b/#0F0/' {} \;
# (replaces #FF0000 red w/ #00FF00 green )

# To find files changed in the last 1 day
find . -ctime -1 -type f

# To find files larger than 1 Mb in /tmp
find /tmp -size 1M -type f

# To find files newer than main.css in ~/src
find ~/src -newer main.css

# To execute a command on every file/dir
find [expression..] -exec [command..] '{}' \;

# Example: find all files/dirs named CVS and delete them:
find -name CVS -exec rm -Rf '{}' \;

# Example: find all files containing a string:
find * -exec grep -l '<string>' {} \;

# To search only on the given directory:
find [directory..] -maxdepth 1

# Example: find all directories modified in the past day and permission 755:
find . -type d -mtime 1 -perm 755

# Example: find and fix all files that have permission o+w:
find -type f -perm /002 -exec chmod o-w '{}' \;

# Example: to find C source files edited in the last two days:
find -name '*.c' -mtime -2

# It’s usually a good idea to pipe it through sort:
find | sort

# If you want an ls -l style listing, you can add -ls as the action to find results:
find -ls | sort -k 11

# Find the Files That Are Using the Most Disk Space
find / -type f -exec wc -c {} \; | sort -n

# Delete Empty Directories
find . -type d -empty -delete

# An Easy-to-Read Recursive File Listing
find . -type f -ls

# Replace a String in Multiple Files
find /path -type f -exec sed -i.bak 's/string/replacement/g' {} \;

# To delete a file who's file name is a pain to define (eg. ^H^H^H) find it's
# inode number with the command "ls -il". Use the line below to find and delete
# the file.
find . -inum 12345 | xargs rm

# Note: on using xargs with find results. In most cases this should not really
# be necessary, and it’s more robust to handle filenames with whitespace using
# -exec or a while read -r loop
find -name '*.c' | while IFS= read -r file; do
  xpath="${file%/*}"; xbase="${file##*/}"; xfext="${xbase##*.}"; xpref="${xbase%.*}";
  head "$file"
done

# To search the entire filesystem for a specific file:
find / -name "rc.conf" -print

# To search current directory and sub directories for a specific file:
find . -name "rc.conf" -print

# To execute a command on every file/dir
find [expression..] -exec [command..] '{}' \;

# Example: find all files/dirs named CVS and delete them:
find -name CVS -exec rm -Rf '{}' \;

# Example: find all files containing a string:
find * -exec grep -l '<string>' {} \;

# To search only on the given directory:
find [directory..] -maxdepth 1

# Example: find all directories modified in the past day and permission 755:
find . -type d -mtime 1 -perm 755

# Example: find and fix all files that have permission o+w:
find -type f -perm /002 -exec chmod o-w '{}' \;

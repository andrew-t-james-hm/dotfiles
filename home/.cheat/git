---
tags: [ vcs ]
---
# To set your identity:
git config --global user.name <name>
git config --global user.email <email>

# To set your editor:
git config --global core.editor <editor>

# To enable color:
git config --global color.ui true

# To stage all changes for commit:
git add --all

# To stash changes locally, this will keep the changes in a separate changelist
# called stash and the working directory is cleaned. You can apply changes
# from the stash anytime
git stash

# To stash changes with a message
git stash save <message>

# To list all the stashed changes
git stash list

# To apply the most recent change and remove the stash from the stash list
git stash pop

# To apply any stash from the list of stashes. This does not remove the stash
# from the stash list
git stash apply stash@{6}

# To commit staged changes
git commit -m <message>

# To edit previous commit message
git commit --amend

# Git commit in the past
git commit --date="`date --date='2 day ago'`"
git commit --date="Jun 13 18:30:25 IST 2015"
# more recent versions of Git also support --date="2 days ago" directly

# To change the date of an existing commit
git filter-branch --env-filter \
    'if [ $GIT_COMMIT = 119f9ecf58069b265ab22f1f97d2b648faf932e0 ]
     then
         export GIT_AUTHOR_DATE="Fri Jan 2 21:38:53 2009 -0800"
         export GIT_COMMITTER_DATE="Sat May 19 01:01:01 2007 -0700"
     fi'

# To removed staged and working directory changes
git reset --hard

# To go 2 commits back
git reset --hard HEAD~2

# To remove untracked files
git clean -f -d

# To remove untracked and ignored files
git clean -f -d -x

# To push to the tracked master branch:
git push origin master

# To push to a specified repository:
git push git@github.com:<username>/<repo>.git

# To delete the branch "branch_name"
git branch -D <branch>

# To make an exisiting branch track a remote branch
git branch -u upstream/foo

# To see who commited which line in a file
git blame <file>

# To sync a fork with the master repo:
git remote add upstream git@github.com:<username>/<repo>.git # Set a new repo
git remote -v                                                # Confirm new remote repo
git fetch upstream                                           # Get branches
git branch -va                                               # List local - remote branches
git checkout master                                          # Checkout local master branch
git checkout -b new_branch                                   # Create and checkout a new branch
git merge upstream/master                                    # Merge remote into local repo
git show 83fb499                                             # Show what a commit did.
git show 83fb499:path/fo/file.ext                            # Shows the file as it appeared at 83fb499.
git diff branch_1 branch_2                                   # Check difference between branches
git log                                                      # Show all the commits
git status                                                   # Show the changes from last commit

# Commit history of a set of files
git log --pretty=email --patch-with-stat --reverse --full-index -- Admin\*.py > Sripts.patch

# Import commits from another repo
git --git-dir=../some_other_repo/.git format-patch -k -1 --stdout <commit SHA> | git am -3 -k

# View commits that will be pushed
git log @{u}..

# View changes that are new on a feature branch
git log -p feature --not master
git diff master...feature

# Interactive rebase for the last 7 commits
git rebase -i @~7

# Diff files WITHOUT considering them a part of git
# This can be used to diff files that are not in a git repo!
git diff --no-index path/to/file/A path/to/file/B

# To pull changes while overwriting any local commits
git fetch --all
git reset --hard origin/master

# Update all your submodules
git submodule update --init --recursive

# Perform a shallow clone to only get latest commits
# (helps save data when cloning large repos)
git clone --depth 1 <remote-url>

# To unshallow a clone
git pull --unshallow

# Diff / Blame
# -----------------

# show a diff of the changes made since your last commit
git diff

# show files added to the index, files with changes, and untracked files
git status

# show recent commits, most recent on top
git log

# show the changeset (diff) of a commit specified by <rev>, which can be any
# SHA1 commit ID, branch name, or tag
git show <rev>

# show who authored each line in <file>
git blame <file>

# show who authored each line in <file> as of <rev> (allows blame to go back in time)
git blame <file> <rev>

# Adding / Deleting
# -----------------

# add <file1>, <file2>, etc... to the project
git add <file1> <file2> ...

# add all files under directory <dir> to the project, including subdirectories
git add <dir>

# add all files under the current directory to the project
git add .

# remove <file1>, <file2>, etc... from the project
git rm <file1> <file2> ...

# Committing
# ----------

# commit <file1>, <file2>, etc..., optionally using commit message <msg>,
# otherwise opening your editor to let you type a commit message
git commit <file1> <file2> ... [-m <msg>]

# commit all files changed since your last commit, optionally using commit
# message <msg>
git commit -a [-m <msg>]

# commit verbosely, i.e. includes the diff of the contents being committed in
# the commit message screen
git commit -v [-m <msg>]

# include changes made to <file1>, <file2>, etc..., and recommit with previous
# commit message
git commit --amend <file1> <file2> ...

# Sharing
# -------

# update the current branch with changes from the server. Note: .git/config must
# have a [branch "some_name"] section for the current branch. Git 1.5.3 and
# above adds this automatically.
git pull

# update the server with your commits across all branches that are *COMMON*
# between your local copy and the server. Local branches that were never pushed
# to the server in the first place are not shared.
git push

# update the server with your commits made to <branch> since your last push.
# This is always *required* for new branches that you wish to share. After the
# first explicity push, "git push" by itself is sufficient.
git push origin <branch>

# Branching
# ---------

# list all local branches
git branch

# list all remote branches
git branch -r

# list all local and remote branches
git branch -a

# create a new branch named <branch>, referencing the same point in history as
# the current branch
git branch <branch>

# create a new branch named <branch>, referencing <start-point>, which may be
# specified any way you like, including using a branch name or a tag name
git branch <branch> <start-point>

# create a tracking branch. Will push/pull changes to/from another repository.
# Example: git branch --track experimental origin/experimental
git branch --track <branch> <remote-branch>


git fetch <name of remote>
git branch <name of branch> <name of remote>/<branch>
# (I could not get the git branch --track to  work for me. Here is a way to do it with >= git 1.5.4)
# Example:
git remote add stevenbristol git://github.com/stevenbristol/lovd-by-less.git
git fetch stevenbristol
git branch stevenbristol stevenbristol/master

# delete a "local remote" branch, used to delete a tracking branch.
git branch -r -d <remote branch>
# Example: git branch -r -d wycats/master

# delete the branch <branch>; if the branch you are deleting points to a commit
# which is not reachable from the current branch, this command will fail with a
# warning.
git branch -d <branch>

# even if the branch points to a commit not reachable from the current branch,
# you may know that that commit is still reachable from some other branch or
# tag. In that case it is safe to use this command to force git to delete the
# branch.
git branch -D <branch>

# make the current branch <branch>, updating the working directory to reflect
# the version referenced by <branch>
git checkout <branch>

# create a new branch <new> referencing <start-point>, and check it out.
git checkout -b <new> <start-point>

# adds a remote branch to your git config. Can be then fetched locally.
git remote add <branch> <remote branch>
# Example: git remote add coreteam git://github.com/wycats/merb-plugins.git

# removes a branch from a remote repository. Example: git push origin
# :refs/old_branch_to_be_deleted
git push <repository> :heads/<branch>

# view remote branches
git branch -a

# check out a remote branch
git checkout -b experimental origin/experimental

# Merging
# -------

# merge branch <branch> into the current branch; this command is idempotent and
# can be run as many times as needed to keep the current branch up-to-date with
# changes in <branch>
git merge <branch>

# merge branch <branch> into the current branch, but do not autocommit the
# result; allows you to make further tweaks
git merge <branch> --no-commit

# merge branch <branch> into the current branch, but in the case of any
# conflicts, the files in the current branch win.
git merge <branch> -s ours

# Conflicts
# ---------

# Work through conflicted files by opening them in your mergetool (opendiff,
# kdiff3, etc.) and choosing left/right chunks. The merged result is staged for
# commit.
git mergetool

# For binary files or if mergetool wont do, resolve the conflict(s) manually and then do:
git add <file1> [<file2> ...]

# Once all conflicts are resolved and staged, commit the pending merge with:
git commit

# Reverting
# ---------

# reverse commit specified by <rev> and commit the result. This does *not* do
# the same thing as similarly named commands in other VCS's such as "svn revert"
# or "bzr revert", see below
git revert <rev>

# re-checkout <file>, overwriting any local changes
git checkout <file>

# re-checkout all files, overwriting any local changes. This is most similar to
# "svn revert" if you're used to Subversion commands
git checkout .

# Undo
# ----

# abandon everything since your last commit; this command can be DANGEROUS. If
# merging has resulted in conflicts and you'd like to just forget about the
# merge, this command will do that
git reset --hard

# undo your most recent *successful* merge *and* any changes that occurred
# after. Useful for forgetting about the merge you just did. If there are
# conflicts (the merge was not successful), use "git reset --hard" (above)
# instead.
git reset --hard ORIG_HEAD

# undo your last commit
git reset --soft HEAD^

# Plumbing
# --------

# determine if merging sha1-B into sha1-A is achievable as a fast forward;
# non-zero exit status is false.
test <sha1-A> = $(git merge-base <sha1-A> <sha1-B>)

# Stashing
# --------

# save your local modifications to a new stash, and run "git reset --hard" to
# revert them, so you can "git svn rebase" or "git pull"
git stash

# restore the changes recorded in the stash on top of the current working tree state
git stash apply

# Environment Variables
# ---------------------

# Your full name to be recorded in any newly created commits. Overrides
# user.name in .git/config
GIT_AUTHOR_NAME, GIT_COMMITTER_NAME

# Your email address to be recorded in any newly created commits. Overrides
# user.email in .git/config
GIT_AUTHOR_EMAIL, GIT_COMMITTER_EMAIL

# Other
# -----

# Create a bare branch (one that has no commits on it)
git checkout --orphan branch_name

# Checkout a new branch from a different starting point
git checkout -b master upstream/master

# Remove all stale branches (ones that have been deleted on remote)
# So if you have a lot of useless branches, delete them on Github and then run this
git remote prune origin

# The following can be used to prune all remotes at once
git remote prune $(git remote | tr '\n' ' ')

# Revisions can also be identified with :/text
# So, this will show the first commit that has "cool" in their message body
git show :/cool

# Undo parts of last commit in a specific file
git checkout -p HEAD^ -- /path/to/file

# Revert a commit and keep the history of the reverted change as a separate revert commit
git revert <commit SHA>

# Pich a commit from a branch to current branch. This is different than merge as
# this just applies a single commit from a branch to current branch
git cherry-pick <commit SHA1>

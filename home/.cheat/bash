## Shell Scripting
# For details visit http://www.gnu.org/software/bash/manual/bashref.html

# A '\' mark before a command will ignore aliases. For example, you have alias
# alias ls='ls --color=auto', and want use ls without that --color option
\ls

# Turn on debugging:
set -x

# Turn off debugging:
set +x

# To implement a case command:
case "$1"
in
  0) echo "zero found";;
  1) echo "one found";;
  2) echo "two found";;
  3*) echo "something beginning with 3 found";;
esac

# Retrieve N-th piped command exit status
printf 'foo' | fgrep 'foo' | sed 's/foo/bar/'
echo ${PIPESTATUS[0]}  # replace 0 with N

# To implement a for loop:
for file in *;
do
  echo $file found;
done

# Use a for Loop at the Command Line
for VAR in LIST

# do
# # use $VAR
# done

# When you need to perform the same action for a list of items, you can use a
# for loop right from your shell.

for USER in bob jill fred

# > do
# > sudo passwd -l $USER
# > logger -t naughty-user $USER
# > done
# Locking password for user bob.
# passwd: Success
# Locking password for user jill.
# passwd: Success
# Locking password for user fred.
# passwd: Success

sudo tail -3 /var/log/messages

# Apr 8 19:29:03 linuxserver naughty-user: bob
# Apr 8 19:29:03 linuxserver naughty-user: jill
# Apr 8 19:29:03 linuxserver naughty-user: fred

# You can also type entire loop on one command line

for USER in bob jill fred; do sudo passwd -l $USER; logger -t naughty-user $USER; done

# Read in Input One Line at a Time

while read LINE

# > do
# >  # Do something with $LINE
# > done < file.txt

command | while read LINE

# > do
# >  # Do something with $LINE
# > done

# If you want to iterate over a list of words, use a for loop. If you want to
# iterate over a line, use a while loop in combination with a read statement and
# redirection.

# Let's look for file systems that are over 90% utilized. If we try to use an if
# statement it will break up the output into word chunks like this.

df | head -1

# Filesystem 1K-blocksUsed Available Use% Mounted on

for x in $(df)

# > do
# > echo $x
# > done
# Filesystem
# 1K-blocks
# Used
# Available
# Use%
# Mounted
# on
# ...

# We need to read in entire lines at a time like this.

df | while read LINE

# > do
# > echo $LINE
# > done
# Filesystem 1K-blocks Used Available Use% Mounted on
# ...

# Here is one way to find file systems that are over 90% utilized.

df

# Filesystem 1K-blocksUsed Available Use% Mounted on
# /dev/sda2 28891260 3270340  25327536 12% /
# tmpfs    515320   72515248  1% /dev/shm
# /dev/sda1  495844 453683 16561 97% /boot

df | grep [0-9]% | while read LINE

# > do
# >  use=$(echo $LINE | awk '{print $5}' | tr -d '%')
# >  mountpoint=$(echo $LINE | awk '{print $6}')
# > [ $use -gt 90 ] && echo "$mountpoint is over 90% utilized."
# > done
# /boot is over 90% utilized.

# Instead of assigning variables within the while loop, you can assign them with
# the read statement. Here is how this method looks.

df | grep [0-9]% | while read fs blocks used available use mountpoint

# > do
# >  use=$(echo $use | tr -d '%')
# >  [ $use -gt 90 ] && echo "$mountpoint is over 90% utilized."
# > done
# /boot is over 90% utilized.

# Accept User Input and Store It in a Variable

read VAR
read -n 1 VAR
read -p "Prompt text" VAR

# Lock file:
( set -o noclobber; echo > my.lock ) || echo 'Failed to create lock file'

# Commands
!! - Last command
!foo - Run most recent command starting with 'foo...' (ex. !ps, !mysqladmin)
!foo:p - Print command that !foo would run, and add it as the latest to command history
!$ - Last 'word' of last command ('/path/to/file' in the command 'ls -lAFh /path/to/file', '-uroot' in 'mysql -uroot')
!$:p - Print word that !$ would substitute
!* - All but first word of last command ('-lAFh /path/to/file' in the command 'ls -lAFh /path/to/file', '-uroot' in 'mysql -uroot')
!*:p - Print words that !* would substitute

^foo^bar - Replace 'foo' in last command with 'bar', print the result, then run. ('mysqladmni -uroot', run '^ni^in', results in 'mysqladmin -uroot')

{a,b,c} passes words to the command, substituting a, b, and c sequentially (`cp file{.bk}` runs `cp file file.bk`)

# Keystrokes
Ctrl + a - Jump to the start of the line
Ctrl + b - Move back a char
Ctrl + c - Terminate the command
Ctrl + d - Delete from under the cursor
Ctrl + e - Jump to the end of the line
Ctrl + f - Move forward a char
Ctrl + k - Delete to EOL
Ctrl + l - Clear the screen
Ctrl + r - Search the history backwards
Ctrl + R - Search the history backwards with multi occurrence
Ctrl + t - Transpose the current char with the previous
Ctrl + u - Delete backward from cursor
Ctrl + w - Delete backward a word
Ctrl + xx - Move between EOL and current cursor position
Ctrl + x @ - Show possible hostname completions
Ctrl + z - Suspend/ Stop the command

Alt + < - Move to the first line in the history
Alt + > - Move to the last line in the history
Alt + ? - Show current completion list
Alt + * - Insert all possible completions
Alt + / - Attempt to complete filename
Alt + . - Yank last argument to previous command
Alt + b - Move backward
Alt + c - Capitalize the word
Alt + d - Delete word
Alt + f - Move forward
Alt + l - Make word lowercase
Alt + n - Search the history forwards non-incremental
Alt + p - Search the history backwards non-incremental
Alt + r - Recall command
Alt + t - Transpose the current word with the previous
Alt + u - Make word uppercase
Alt + back-space - Delete backward from cursor

(Here "2T" means Press TAB twice)
$ 2T - All available commands(common)
$ (string)2T - All available commands starting with (string)
$ /2T - Entire directory structure including Hidden one
$ (dir)2T - Only Sub Dirs inside (dir) including Hidden one
$ *2T - Only Sub Dirs inside without Hidden one
$ ~2T - All Present Users on system from "/etc/passwd"
$ $2T - All Sys variables
$ @2T - Entries from "/etc/hosts"
$ =2T - Output like ls or dir
.bash_profile = sourced by login shell,
.bashrc = sourced by all shells,
.bash_aliases = should be sourced by .bashrc
  
# Run something:
for i in a b c; do $i 'hello'; done
  
# Do something on a bunch of files:
for i in *.rb; do echo $i; done
  
# If syntax:
if [ -e .ssh ]; then echo "hi"; fi
  
# file check flags:
#   -e:  file exists
#   -f:  regular file (non directory)
#   -d:  directory
#   -s:  non-zero file
#   -x:  execute permission

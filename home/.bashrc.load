#!/bin/bash

# handle the case when remote editing files through emacs
if [[ "$TERM" == "dumb" ]]; then
  exit 0 # dont kill rest of script
fi

# [[ $- == *i*  ]] && echo 'Interactive' || echo 'Not interactive'

# TODO: Verify inputrc is being read, if not, load it.
# bind -f "$HOME/.inputrc"

# While `mvim` is running it keeps calling my login shell, do not know why, till
# then, lets just disable it the best way we know how to. If MYVIMRC environment
# variable does not work, there is also VIMRUNTIME to check for.
if [ -n "$MYVIMRC" ]; then
  exit 0
fi

# exec into bash >= 4, when available (for login shells)
if [[ $0 = -bash ]] && shopt -qp login_shell && [[ ${BASH_VERSINFO[0]} -lt 4 ]]; then
    newVersion=$(bash --version | head -n1 | sed 's/.* version \([^ ]*\).*/\1/')
    if [[ $newVersion > $BASH_VERSION ]]; then
        echo "Found Bash v$newVersion"
        # and try preserving all the invocation options
        exec -l bash -l${-//[chimBH]/} # "$@"
    fi
    unset newVersion
    #exec bash -$- "${@:-$BASH_EXECUTION_STRING}" # for non-interactive
fi

if hash gdate 2>/dev/null; then
    tic=$(($(gdate +%s%N)/1000000))
fi

# Path to the bash it configuration
export BASH_IT=$HOME/.bash
export DFM_REPO="${HOME}/.dotfiles"

# No dependency, simple and useful utilities
. "${BASH_IT}/lib/utils.sh"

__dot_system_type=$(uname)
__dot_brew_home=""
declare -a __dot_brew_list="()"
declare -a __dot_brew_taps="()"
declare -a __dot_cask_list="()"

if [ "$__dot_system_type" == "Darwin" ]; then
    ulimit -n 65536 65536

    if hash brew 2>/dev/null; then
        __dot_brew_home="$(brew --prefix)"
        export BREW_HOME=$__dot_brew_home

        __dot_brew_list="$(brew list | sed 's/:.*//')"
        __dot_brew_list=($__dot_brew_list)
        __dot_brew_taps=($(brew tap | sed 's/:.*//'))

        if contains_element "caskroom/cask" "${__dot_brew_taps[@]}"; then
            export HOMEBREW_CASK_OPTS="--appdir=/Applications --caskroom=/usr/local/caskroom"
            __dot_cask_list=($(brew cask list --caskroom=/usr/local/caskroom | sed 's/:.*//'))
        fi
    fi
elif [ "$__dot_system_type" == "Linux" ]; then
    true
fi

# echo "Found ${#__dot_brew_list[@]} installed formulas"
# echo "Found ${#__dot_brew_taps[@]} taps"
# echo "Found ${#__dot_cask_list[@]} installed applications"

# Checks if an item is installed in homebrew.
#
# @param The element to check if present
# @return 0 if present 1 otherwise
brew_contains_element() {
  # http://stackoverflow.com/questions/3685970
  local e && e=$(contains_element "$1" "${__dot_brew_list[@]}")
  return $e
}

brew_contains_tap() {
  local e && e=$(contains_element "$1" "${__dot_brew_taps[@]}")
  return $e
}

cask_contains_element() {
  local e && e=$(contains_element "$1" "${__dot_cask_list[@]}")
  return $e
}

# detect ssh or not, but no bother in emacs term
if [ -z "$INSIDE_EMACS" ]; then
  # http://unix.stackexchange.com/questions/9605/
  if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
    export SESSION_TYPE=remote/ssh
  else
    case $(ps -o comm= -p $PPID) in
      sshd|*/sshd) export SESSION_TYPE=remote/ssh;;
    esac
  fi
fi


# Set mveditor/MacVim as EDITOR.
if [ -f "${BASH_IT}/mveditor.sh" ]; then
    export EDITOR="${BASH_IT}/mveditor.sh"
    export GIT_EDITOR="${BASH_IT}/mveditor.sh"
else
    echo "WARNING: Can't find mac vim editor. Using vim instead."
    export EDITOR="vim"
    export GIT_EDITOR="vim"
fi

# Don't check mail when opening terminal.
unset MAILCHECK

# Add tab completion for sudo.
complete -cf sudo

# vim and gnome-terminal have support for 256 colours in fedora 8 at least
# Note debian/ubuntu users need to install the ncurses-term package for this
# Note this should be set in ~/.profile for Fedora startup scripts to
# setup LS_COLORS correctly.
if [[ $COLORTERM = gnome-* && $TERM = xterm ]]  && infocmp gnome-256color >/dev/null 2>&1; then
    export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
    export TERM=xterm-256color
fi

# General Startup #
umask 002
mesg n

# Autocorrect typos in path names when using `cd`
shopt -s cdspell

# Check the window size after each command and, if necessary, update the values
# of LINES and COLUMNS.
shopt -s checkwinsize

# Append to the Bash history file, rather than overwriting it
shopt -s histappend

# Case-insensitive globbing (used in pathname expansion)
shopt -s nocaseglob

# Use color output for less.
export LESS=-RXE

# Don't clear the screen after quitting a manual page
export MANPAGER="less -X"

# Change this to your console based IRC client of choice.
export IRC_CLIENT='irssi'

# Load composure first, so we support function metadata
source "${BASH_IT}/lib/composure.sh"

# support 'plumbing' metadata
cite _about _param _example _group _author _version

export THEME_PROMPT_CLOCK_FORMAT="%l:%M"
export THEME_BATTERY_PERCENTAGE_CHECK=false
export THEME_CLOCK_CHECK=false

if [ -z "$INSIDE_EMACS" ]; then
  # Lock and load a custom theme file location /.bash/themes/
  # export BASH_IT_THEME='powerline-multiline'
  export BASH_IT_THEME='oh-my-git'
else
  unset PROMPT_COMMAND
  export BASH_IT_THEME='pure'
fi

# Load colors first so they can be use in base theme
. "${BASH_IT}/themes/colors.theme.bash"
. "${BASH_IT}/themes/base.theme.bash"

# library
lib="${BASH_IT}/lib/*.bash"
for config_file in $lib
do
  . "$config_file"
done
unset config_file
unset lib

pathmunge "/usr/local/sbin"
pathmunge "/usr/local/bin"

if [ "$__dot_system_type" == "Darwin" ]; then
    export CHEATCOLORS=true
    export HTML_TIDY=$HOME/.tidyrc
    export TLSOURCE=en TLTARGET=es
    export PERL_LOCAL_LIB_ROOT="${HOME}/perl5:$PERL_LOCAL_LIB_ROOT";
    export PERL_MB_OPT="--install_base "${HOME}/perl5"";
    export PERL_MM_OPT="INSTALL_BASE=${HOME}/perl5";
    export PERL5LIB="${HOME}/perl5/lib/perl5:$PERL5LIB";

    pathmunge "${HOME}/.cabal/bin"
    pathmunge "${HOME}/.bin"

    if brew_contains_element "openconnect"; then
        export VPNC_SCRIPT="$__dot_brew_home/etc/vpnc-script"
    fi

    if cask_contains_element "vagrant"; then
        export VAGRANT_CHECKPOINT_DISABLE=1
        export VAGRANT_HOME="$HOME/.vagrant.d"
        export VAGRANT_DOTFILE_PATH=".vagrant-$(hostname)"
        # Time Machine ignore this directory
        export VAGRANT_VMWARE_CLONE_DIRECTORY="${HOME}/.cache/vagrant"
    fi
elif [ "$__dot_system_type" == "Linux" ]; then
    pathmunge "/usr/local/linuxbrew/bin"
    pathmunge "${HOME}/.cabal/bin"
    pathmunge "${HOME}/.bin"

    # if [ ${#__dot_brew_list[@]} -gt 0 ]; then
    if [ -n "$__dot_brew_home" ]; then
        # Fix checks for gcc compiler when not present when `--env=inherit` specified
        export HOMEBREW_TEMP="${__dot_brew_home}/tmp"
        export MANPATH="${__dot_brew_home}/share/man:$MANPATH"
        export INFOPATH="${__dot_brew_home}/share/info:$INFOPATH"
    fi

    dpkg -s vagrant &>/dev/null || {
        export VAGRANT_CHECKPOINT_DISABLE=1
        export VAGRANT_HOME=~/.vagrant.d
        export VAGRANT_DOTFILE_PATH=".vagrant-$(hostname)"
    }

    dpkg -s vpnc-scripts &>/dev/null || {
        export VPNC_SCRIPT=/usr/share/vpnc-scripts/vpnc-script
    }
fi

# Helper function loading various enable-able files
function _load_bash_it_files() {
  subdirectory="$1"
  if [ ! -d "${BASH_IT}/${subdirectory}" ]; then
    continue
  fi
  FILES="${BASH_IT}/${subdirectory}/*.bash"
  for bash_config_file in $FILES; do
    if [ -e "${bash_config_file}" ]; then
        source $bash_config_file
        # mytime="$(time (source $bash_config_file) 2>&1 1>/dev/null )"
        # echo "${bash_config_file}: ${mytime}"
    fi
  done
}

# Load enabled plugins, aliases, and completion
for file_type in "plugins" "completion" "aliases"; do
  _load_bash_it_files $file_type
done

# Load custom aliases, completion, plugins
for file_type in "plugins" "completion" "aliases"; do
  if [ -e "${BASH_IT}/${file_type}/custom.${file_type}.bash" ]; then
    source "${BASH_IT}/${file_type}/custom.${file_type}.bash"
  fi
done
unset file_type

if [[ $PROMPT ]]; then
    export PS1="\["$PROMPT"\]"
fi

# Adding Support for other OSes
PREVIEW="less"
[ -s /usr/bin/gloobus-preview ] && PREVIEW="gloobus-preview"
[ -s /Applications/Preview.app ] && PREVIEW="/Applications/Preview.app"
export PREVIEW

# TODO: Add preexec to time machine node_modules folders
function title {
  true # no op
}

# Default do-nothing implementation of preexec.
function preexec () {
    true
}

# Default do-nothing implementation of precmd.
function precmd () {
    true
}

function iterm2_preexec_hook() {
    . "${BASH_IT}/lib/iterm2-preexec.sh"

    preexec_functions+=(iterm2_preexec_invoke_cmd)

    # This is necessary so the first command line will have a hostname and current directory.
    iterm2_print_state_data
    iterm2_print_version_number
}

# https://github.com/rcaloras/bash-preexec
# TODO: Migrate to brew `bash-preexec`
if [ -z "$INSIDE_EMACS" ]; then
    if [[ -n "$BASH_VERSION" ]]; then
        . "${BASH_IT}/lib/bash-preexec.sh"
        . "${BASH_IT}/lib/bashhub-preexec.sh"

        if [ "${TERM_PROGRAM:-""}" != "" ]; then
            if [ "$TERM_PROGRAM" == "iTerm.app" ]; then
                iterm2_preexec_hook
                function title {
                    echo -ne "\033]0;"$*"\007"
                }
            fi
        elif [ -n "$SESSION_TYPE" ]; then
            iterm2_preexec_hook
        fi
    fi
fi

. ${BASH_IT}/custom.sh

if hash gdate 2>/dev/null; then
    toc=$(($(gdate +%s%N)/1000000))
    delta=$(($toc - $tic))
    LC_NUMERIC=C LC_COLLATE=C
    printf 'Bash loaded in %g secs\n' $(bc <<< "scale=3; ${delta}/1000")
    unset tic toc delta
else
    echo "Bash loaded in $SECONDS secs"
fi

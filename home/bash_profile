export CLICOLOR=1
export LSCOLORS=ExFxCxDxBxegedabagacad
export EDITOR='mate -w'
export PATH="/usr/local/bin:/usr/local/sbin:$PATH"
export JAVA_HOME="`/usr/libexec/java_home`"
alias vim='/Applications/MacVim.app/Contents/MacOS/Vim'
alias chrome="/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome"
alias canary="/Applications/Google\ Chrome\ Canary.app/Contents/MacOS/Google\ Chrome\ Canary"
alias rcanary="/Applications/Google\ Chrome\ Canary.app/Contents/MacOS/Google\ Chrome\ Canary --remote-debugging-port=9222"
export PYTHONPATH=/usr/local/lib/python2.6/site-packages     

# http://www.lugod.org/mailinglists/archives/vox-tech/2003-06/msg00182.html
# For those who want to use Vi bindings in bash, this corrects a
# few annoyances:
#
# 1) up and down arrows retrieve history lines even in insert mode
# 2) left and right arrows work in insert mode
# 3) Ctrl-A and Ctrl-E work how you expect if you have had to
#    live in Emacs mode in the past.
# 4) So does Ctrl-D.
# 5) And Ctrl-L.

## Command-mode bindings
# Ctrl-A or Home: insert at line beginning like in emacs mode
bind -m vi-command '\C-a: vi-insert-beg'
# Ctrl-E or End: append at line end like in emacs mode
bind -m vi-command '\C-e: vi-append-eol'
# to switch to emacs editing mode
bind -m vi-command '"ZZ": emacs-editing-mode'

## Insert-mode bindings
# up arrow or PgUp: append to previous history line
bind -m vi-insert '"\M-[A": ""'
bind -m vi-insert '"\M-[5~": ""'
# bind -m vi-insert '\C-p: previous-history'
# ^p check for partial match in history
bind -m vi-insert "\C-p":dynamic-complete-history
# dn arrow or PgDn: append to next history line
bind -m vi-insert '"\M-[B": ""'
bind -m vi-insert '"\M-[6~": ""'
# bind -m vi-insert '\C-n: next-history'
# ^n cycle through the list of partial matches
bind -m vi-insert "\C-n":menu-complete     
# Ctrl-A: insert at line start like in emacs mode
bind -m vi-insert '\C-a: beginning-of-line'
# Ctrl-E: append at line end like in emacs mode
bind -m vi-insert '\C-e: end-of-line'
# Ctrl-D: delete character
bind -m vi-insert '\C-d: delete-char'
# Ctrl-L: clear screen
bind -m vi-insert "\C-l":clear-screen

## Emacs bindings
# Meta-V: go back to vi editing
bind -m emacs '"\ev": vi-editing-mode'

## Specify vi editing mode
set -o vi
   

        
# The internal command will return focus directly to the terminal after 
# the commit message is saved and quit. It's a small optimization, 
# but a nice one, I find. (Tip originally found here: 
# http://b4winckler.wordpress.com/2009/09/02/macvim-on-snow-leopard/#comment-36
export EDITOR='mvim -f -c "au VimLeave * !open -a iTerm"'

# vim and gnome-terminal have support for 256 colours in fedora 8 at least
# Note debian/ubuntu users need to install the ncurses-term package for this
# Note this should be set in ~/.profile for Fedora startup scripts to
# setup LS_COLORS correctly.
export TERM=xterm-256color

# Don't store duplicate adjacent items in the history
# HISTCONTROL=ignoreboth

# Larger bash history (default is 500)
export HISTFILESIZE=10000
export HISTSIZE=10000

if [ -f ~/.bashrc ]; then
  source ~/.bashrc
fi

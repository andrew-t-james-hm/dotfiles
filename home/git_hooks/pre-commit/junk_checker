#!/bin/bash

# # Description
#
# Checks for user defined phrases that you don't want to commit to your
# repository, such as `var_dump()`, `console.log()` etc. on `pre-commit`.
#
# This can be overridden by using the following option :
#
# ```sh
# git commit --no-verify
# ```
#
# This hook is language-agnostic.
#
# You must configure the `phrasesfile` option for this hook . The value is the
# name of a file that contains one forbidden phrase per line. There is a sample,
# you can use it like this :
#
#     git config [--global] hooks.junkchecker.phrasesfile .git/hooks/junkchecker/junk-phrases.sample
#
# # Activation
#
# ```sh
# git config --add hooks.enabled-plugins junkchecker
# ```

. $GIT_DIR/hooks/git_config_wrapper.sh
get_hook_config junkchecker phrasesfile junkchecker_phrases_file required
if [ -f $junkchecker_phrases_file ]
then
	if git-rev-parse --verify HEAD >/dev/null 2>&1; then
		against=HEAD
	else
		against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
	fi

	for FILE in `git diff-index --cached --name-status $against -- | cut --characters=3-`; do
		if [ -f $FILE ]
		then
			for PHRASE in `cat $junkchecker_phrases_file`; do
				git diff --cached --diff-filter=A $FILE | grep --quiet $PHRASE
				if [ $? -eq 0 ]
				then
					cat <<- EOT >&2
					Junk checker detected: $FILE contains '$PHRASE'.
					Use the --no-verify option to bypass this error message.
					EOT
					exit 1
				fi
			done
		fi
	done
else
	echo "Could not find file $junkchecker_phrases_file . Please check your configuration."
	exit 2
fi
